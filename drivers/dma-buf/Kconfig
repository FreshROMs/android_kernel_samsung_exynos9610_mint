menu "DMABUF options"

config SYNC_FILE
	bool "Explicit Synchronization Framework"
	default n
	select ANON_INODES
	select DMA_SHARED_BUFFER
	---help---
	  The Sync File Framework adds explicit syncronization via
	  userspace. It enables send/receive 'struct dma_fence' objects to/from
	  userspace via Sync File fds for synchronization between drivers via
	  userspace components. It has been ported from Android.

	  The first and main user for this is graphics in which a fence is
	  associated with a buffer. When a job is submitted to the GPU a fence
	  is attached to the buffer and is transferred via userspace, using Sync
	  Files fds, to the DRM driver for example. More details at
	  Documentation/sync_file.txt.

config SW_SYNC
	bool "Sync File Validation Framework"
	default n
	depends on SYNC_FILE
	depends on DEBUG_FS
	---help---
	  A sync object driver that uses a 32bit counter to coordinate
	  synchronization.  Useful when there is no hardware primitive backing
	  the synchronization.

	  WARNING: improper use of this can result in deadlocking kernel
	  drivers from userspace. Intended for test and debug only.

config DMA_BUF_CONTAINER
	bool "dma-buf container support"
	default y
	depends on DMA_SHARED_BUFFER
	---help---
	  dma-buf container is a dma-buf that can contain multiple different
	  dma-buf objects. It is useful when delivering a lot of dma-buf objects
	  between processes or user and kernel to reduce communication overhead.

config DMA_BUF_CONTAINER_TEST
	bool "test driver for dma-buf container"
	default n
	depends on DMA_BUF_CONTAINER
	---help---
	  Test driver for dma-buf container to verify the elements in the
	  dma-buf container are the same as the given list of dma-buf objects.

config DMABUF_TRACE
	bool "dma-buf trace support"
	default y
	depends on DMA_SHARED_BUFFER

endmenu

/*
 * Samsung Exynos SoC series FIMC-IS2 driver
 *
 * Copyright (c) 2015 Samsung Electronics Co., Ltd
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef FIMC_IS_HW_CSIS_V5_1_H
#define FIMC_IS_HW_CSIS_V5_1_H

#include "fimc-is-hw-api-common.h"

#define CSIS_REG_DMA_1D_DMA			(1)
#define CSIS_REG_DMA_2D_DMA			(0)
#define CSIS_REG_DMA_PACK12			(1)
#define CSIS_REG_DMA_NORMAL			(0)
#define CSIS_REG_DMA_DUMP			(1)
#define CSIS_REG_DMA_STG_LEGACY_MODE		(0)
#define CSIS_REG_DMA_STG_PACKET_MODE		(1)
#define CSIS_REG_DMA_INPUT_OTF			(0)
#define CSIS_REG_DMA_INPUT_PRL			(1)

/*
 * 'b10 : Quad pixel mode (RAW8/10/12)
 * 'b01 : Dual pixel mode (RAW8/10/12, YUV422)
 * 'b00 : Single pixel mode
 */
#define CSIS_PIXEL_MODE_QUAD			(2)
#define CSIS_PIXEL_MODE_DUAL			(1)
#define CSIS_PIXEL_MODE_SING			(0)

#define CSIS_DMA_INPUT_PATH	CSIS_REG_DMA_INPUT_OTF

#ifdef DBG_CSIISR
#define CSIS_IRQ_MASK0 0x0FFFFF1F
#define CSIS_IRQ_MASK1 0x0000FFFF
#define CSIS_DMA_IRQ_MASK 0x00F11FF0
#define CSIS_ERR_MASK0 0x000FFF1F
#define CSIS_ERR_MASK1 0x0000FFF0
#define CSIS_DMA_ERR_MASK 0x00F11000
#else
/* Default Interrupt Masking */
#define CSIS_IRQ_MASK0 0x011FFF1F
#define CSIS_IRQ_MASK1 0x0000FFF0
#define CSIS_DMA_IRQ_MASK 0x00F11FF0
#define CSIS_ERR_MASK0 0x000FFF1F
#define CSIS_ERR_MASK1 0x0000FFF0
#define CSIS_DMA_ERR_MASK 0x00F11000
#endif /* DBG_CSIISR */

/* the total count of csis v5.0's regs */
enum fimc_is_hw_csi_reg_name {
	CSIS_R_CSIS_VERSION,
	CSIS_R_CSIS_CMN_CTRL,
	CSIS_R_CSIS_CLK_CTRL,
	CSIS_R_CSIS_INT_MSK0,
	CSIS_R_CSIS_INT_SRC0,
	CSIS_R_CSIS_INT_MSK1,
	CSIS_R_CSIS_INT_SRC1,
	CSIS_R_ISP_CONFIG_CH0,
	CSIS_R_ISP_RESOL_CH0,
	CSIS_R_ISP_SYNC_CH0,
	CSIS_R_ISP_CONFIG_CH1,
	CSIS_R_ISP_RESOL_CH1,
	CSIS_R_ISP_SYNC_CH1,
	CSIS_R_ISP_CONFIG_CH2,
	CSIS_R_ISP_RESOL_CH2,
	CSIS_R_ISP_SYNC_CH2,
	CSIS_R_ISP_CONFIG_CH3,
	CSIS_R_ISP_RESOL_CH3,
	CSIS_R_ISP_SYNC_CH3,
	CSIS_R_SDW_CONFIG_CH0,
	CSIS_R_SDW_RESOL_CH0,
	CSIS_R_SDW_SYNC_CH0,
	CSIS_R_SDW_CONFIG_CH1,
	CSIS_R_SDW_RESOL_CH1,
	CSIS_R_SDW_SYNC_CH1,
	CSIS_R_SDW_CONFIG_CH2,
	CSIS_R_SDW_RESOL_CH2,
	CSIS_R_SDW_SYNC_CH2,
	CSIS_R_SDW_CONFIG_CH3,
	CSIS_R_SDW_RESOL_CH3,
	CSIS_R_SDW_SYNC_CH3,
	CSIS_R_FRM_CNT_CH0,
	CSIS_R_FRM_CNT_CH1,
	CSIS_R_FRM_CNT_CH2,
	CSIS_R_FRM_CNT_CH3,
	CSIS_R_LINE_INTR_CH0,
	CSIS_R_LINE_INTR_CH1,
	CSIS_R_LINE_INTR_CH2,
	CSIS_R_LINE_INTR_CH3,
	CSIS_R_PHY_STATUS,
	CSIS_R_PHY_CMN_CTRL,
	CSIS_REG_CNT
};

static struct fimc_is_reg csi_regs[CSIS_REG_CNT] = {
	{0x0000, "CSIS_VERSION"},
	{0x0004, "CSIS_CMN_CTRL"},
	{0x0008, "CSIS_CLK_CTRL"},
	{0x0010, "CSIS_INT_MSK0"},
	{0x0014, "CSIS_INT_SRC0"},
	{0x0018, "CSIS_INT_MSK1"},
	{0x001C, "CSIS_INT_SRC1"},
	{0x0040, "ISP_CONFIG_CH0"},
	{0x0044, "ISP_RESOL_CH0"},
	{0x0048, "ISP_SYNC_CH0"},
	{0x0050, "ISP_CONFIG_CH1"},
	{0x0054, "ISP_RESOL_CH1"},
	{0x0058, "ISP_SYNC_CH1"},
	{0x0060, "ISP_CONFIG_CH2"},
	{0x0064, "ISP_RESOL_CH2"},
	{0x0068, "ISP_SYNC_CH2"},
	{0x0070, "ISP_CONFIG_CH3"},
	{0x0074, "ISP_RESOL_CH3"},
	{0x0078, "ISP_SYNC_CH3"},
	{0x0080, "SDW_CONFIG_CH0"},
	{0x0084, "SDW_RESOL_CH0"},
	{0x0088, "SDW_SYNC_CH0"},
	{0x0090, "SDW_CONFIG_CH1"},
	{0x0094, "SDW_RESOL_CH1"},
	{0x0098, "SDW_SYNC_CH1"},
	{0x00A0, "SDW_CONFIG_CH2"},
	{0x00A4, "SDW_RESOL_CH2"},
	{0x00A8, "SDW_SYNC_CH2"},
	{0x00B0, "SDW_CONFIG_CH3"},
	{0x00b4, "SDW_RESOL_CH3"},
	{0x00B8, "SDW_SYNC_CH3"},
	{0x0100, "FRM_CNT_CH0"},
	{0x0104, "FRM_CNT_CH1"},
	{0x0108, "FRM_CNT_CH2"},
	{0x010C, "FRM_CNT_CH3"},
	{0x0110, "LINE_INTR_CH0"},
	{0x0114, "LINE_INTR_CH1"},
	{0x0118, "LINE_INTR_CH2"},
	{0x011C, "LINE_INTR_CH3"},
	{0x0700, "PHY_STATUS"},
	{0x0704, "PHY_CMN_CTRL"},
};

/* the total count of the fields of csis v5.0's reg */
enum fimc_is_hw_csi_reg_field {
	CSIS_F_PHY_SEL,
	CSIS_F_QCHANNEL_EN,
	CSIS_F_UPDATE_SHADOW,
	CSIS_F_DESKEW_LEVEL,
	CSIS_F_INTERLEAVE_MODE,
	CSIS_F_LANE_NUMBER,
	CSIS_F_UPDATE_SHADOW_CTRL,
	CSIS_F_SW_RESET,
	CSIS_F_CSI_EN,
	CSIS_F_CLKGATE_TRAIL,
	CSIS_F_CLKGATE_EN,
	CSIS_F_MSK_EVENBEFORE,
	CSIS_F_MSK_EVENAFTER,
	CSIS_F_MSK_ODDBEFORE,
	CSIS_F_MSK_ODDAFTER,
	CSIS_F_MSK_FRAMESTART,
	CSIS_F_MSK_FRAMEEND,
	CSIS_F_MSK_ERR_SOT_HS,
	CSIS_F_MSK_ERR_LOST_FS,
	CSIS_F_MSK_ERR_LOST_FE,
	CSIS_F_MSK_ERR_OVER,
	CSIS_F_MSK_ERR_WRONG_CFG,
	CSIS_F_MSK_ERR_ECC,
	CSIS_F_MSK_ERR_CRC_DPHY,
	CSIS_F_MSK_ERR_ID,
	CSIS_F_EVENBEFORE,
	CSIS_F_EVENAFTER,
	CSIS_F_ODDBEFORE,
	CSIS_F_ODDAFTER,
	CSIS_F_FRAMESTART,
	CSIS_F_FRAMEEND,
	CSIS_F_ERR_SOT_HS,
	CSIS_F_ERR_LOST_FS,
	CSIS_F_ERR_LOST_FE,
	CSIS_F_ERR_OVER,
	CSIS_F_ERR_WRONG_CFG,
	CSIS_F_ERR_ECC,
	CSIS_F_ERR_CRC_DPHY,
	CSIS_F_ERR_ID,
	CSIS_F_MSK_VRESOL_MISMATCH,
	CSIS_F_MSK_HRESOL_MISMATCH,
	CSIS_F_MSK_RXINVALIDCODEHS,
	CSIS_F_MSK_ERRSOTSYNCHS,
	CSIS_F_MSK_MAL_CRC,
	CSIS_F_MSK_ERR_CRC_CPHY,
	CSIS_F_MSK_LINE_END,
	CSIS_F_VRESOL_MISMATCH,
	CSIS_F_HRESOL_MISMATCH,
	CSIS_F_RXINVALIDCODEHS,
	CSIS_F_ERRSOTSYNCHS,
	CSIS_F_MAL_CRC,
	CSIS_F_ERR_CRC_CPHY,
	CSIS_F_LINE_END,
	CSIS_F_PIXEL_MODE,
	CSIS_F_RGB_SWAP,
	CSIS_F_DECOMP_PREDICT,
	CSIS_F_DECOMP_EN,
	CSIS_F_DATAFORMAT,
	CSIS_F_VIRTUAL_CHANNEL,
	CSIS_F_VRESOL,
	CSIS_F_HRESOL,
	CSIS_F_HSYNC_LINTV,
	CSIS_F_PIXEL_MODE_SDW,
	CSIS_F_RGB_SWAP_SDW,
	CSIS_F_DECOMP_PREDICT_SDW,
	CSIS_F_DECOMP_EN_SDW,
	CSIS_F_DATAFORMAT_SDW,
	CSIS_F_VIRTUAL_CHANNEL_SDW,
	CSIS_F_VRESOL_SDW,
	CSIS_F_HRESOL_SDW,
	CSIS_F_HSYNC_LINTV_SDW,
	CSIS_F_FRM_CNT_CH0,
	CSIS_F_FRM_CNT_CH1,
	CSIS_F_FRM_CNT_CH2,
	CSIS_F_FRM_CNT_CH3,
	CSIS_F_LINE_INTR_CH_N,
	CSIS_F_ULPSDAT,
	CSIS_F_STOPSTATEDAT,
	CSIS_F_ULPSCLK,
	CSIS_F_STOPSTATECLK,
	CSIS_F_HSSETTLE,
	CSIS_F_S_CLKSETTLECTL,
	CSIS_F_S_BYTE_CLK_ENABLE,
	CSIS_F_S_DPDN_SWAP_CLK,
	CSIS_F_S_DPDN_SWAP_DAT,
	CSIS_F_ENABLE_DAT,
	CSIS_F_ENABLE_CLK,
	CSIS_REG_FIELD_CNT
};

static struct fimc_is_field csi_fields[CSIS_REG_FIELD_CNT] = {
/* field_name, start_bit, bit_width, type, reset */
	{"PHY_SEL", 21, 1, RW, 0},
	{"QCHANNEL_EN", 20, 1, RW, 0},
	{"UPDATE_SHADOW", 16, 4, RW, 0},
	{"DESKEW_LEVEL", 13, 3, RW, 2},
	{"INTERLEAVE_MODE", 10, 2, RW, 0},
	{"LANE_NUMBER", 8, 2, RW, 0},
	{"UPDATE_SHADOW_CTRL", 2, 1, RW, 0},
	{"SW_RESET", 1, 1, WO, 0},
	{"CSI_EN", 0, 1, RW, 0},
	{"CLKGATE_TRAIL", 16, 16, RW, 0},
	{"CLKGATE_EN", 4, 4, RW, 0xF},
	{"MSK_EVENBEFORE", 31, 1, RW, 0},
	{"MSK_EVENAFTER", 30, 1, RW, 0},
	{"MSK_ODDBEFORE", 29, 1, RW, 0},
	{"MSK_ODDAFTER", 28, 1, RW, 0},
	{"MSK_FRAMESTART", 24, 4, RW, 0},
	{"MSK_FRAMEEND", 20, 4, RW, 0},
	{"MSK_ERR_SOT_HS", 16, 4, RW, 0},
	{"MSK_ERR_LOST_FS", 12, 4, RW, 0},
	{"MSK_ERR_LOST_FE", 8, 4, RW, 0},
	{"MSK_ERR_OVER", 4, 1, RW, 0},
	{"MSK_ERR_WRONG_CFG", 3, 1, RW, 0},
	{"MSK_ERR_ECC", 2, 1, RW, 0},
	{"MSK_ERR_CRC_DPHY", 1, 1, RW, 0},
	{"MSK_ERR_ID", 0, 1, RW, 0},
	{"EVENBEFORE", 31, 1, RW, 0},
	{"EVENAFTER", 30, 1, RW, 0},
	{"ODDBEFORE", 29, 1, RW, 0},
	{"ODDAFTER", 28, 1, RW, 0},
	{"FRAMESTART", 24, 4, RW, 0},
	{"FRAMEEND", 20, 4, RW, 0},
	{"ERR_SOT_HS", 16, 4, RW, 0},
	{"ERR_LOST_FS", 12, 4, RW, 0},
	{"ERR_LOST_FE", 8, 4, RW, 0},
	{"ERR_OVER", 4, 1, RW, 0},
	{"ERR_WRONG_CFG", 3, 1, RW, 0},
	{"ERR_ECC", 2, 1, RW, 0},
	{"ERR_CRC_DPHY", 1, 1, RW, 0},
	{"ERR_ID", 0, 1, RW, 0},
	{"MSK_VREOSL_MISMATCH", 12, 4, RW, 0},
	{"MSK_HREOSL_MISMATCH", 8, 4, RW, 0},
	{"MSK_RXINVALIDCODEHS", 7, 1, RW, 0},
	{"MSK_ERRSOTSYNCHS", 6, 1, RW, 0},
	{"MSK_MAL_CRC", 5, 1, RW, 0},
	{"MSK_ERR_CRC_CPHY", 4, 1, RW, 0},
	{"MSK_LINE_END", 0, 4, RW, 0},
	{"VREOSL_MISMATCH", 12, 4, RW, 0},
	{"HREOSL_MISMATCH", 8, 4, RW, 0},
	{"RXINVALIDCODEHS", 7, 1, RW, 0},
	{"ERRSOTSYNCHS", 6, 1, RW, 0},
	{"MAL_CRC", 5, 1, RW, 0},
	{"ERR_CRC_CPHY", 4, 1, RW, 0},
	{"LINE_END", 0, 4, RW, 0},
	{"PIXEL_MODE", 12, 2, RW, 0},
	{"RGB_SWAP", 10, 1, RW, 0},
	{"DECOMP_PREDICT", 9, 1, RW, 0},
	{"DECOMP_EN", 8, 1, RW, 0},
	{"DATAFORMAT", 2, 6, RW, 0x3F},
	{"VIRTUAL_CHANNEL", 0, 2, RW, 0},
	{"VRESOL", 16, 16, RW, 0x8000},
	{"HRESOL", 0, 16, RW, 0x8000},
	{"HSYNC_LINTV", 18, 6, RW, 0},
	{"PIXEL_MODE_SDW", 12, 2, RO, 0},
	{"RGB_SWAP_SDW", 10, 1, RO, 0},
	{"DECOMP_PREDICT_SDW", 9, 1, RO, 0},
	{"DECOMP_EN_SDW", 8, 1, RO, 0},
	{"DATAFORMAT_SDW", 2, 6, RO, 0x3F},
	{"VIRTUAL_CHANNEL_SDW", 0, 2, RO, 0},
	{"VRESOL_SDW", 16, 16, RO, 0x8000},
	{"HRESOL_SDW", 0, 16, RO, 0x8000},
	{"HSYNC_LINTV_SDW", 18, 6, RO, 0},
	{"FRM_CNT_CH0", 0, 32, RW, 0},
	{"FRM_CNT_CH1", 0, 32, RW, 0},
	{"FRM_CNT_CH2", 0, 32, RW, 0},
	{"FRM_CNT_CH3", 0, 32, RW, 0},
	{"LINE_INTR_CH_N", 0, 32, RW, 0},
	{"ULPSDAT", 8, 4, RO, 0},
	{"STOPSTATEDAT", 4, 4, RO, 0xF},
	{"ULPSCLK", 1, 1, RO, 0},
	{"STOPSTATECLK", 0, 1, RO, 1},
	{"HSSETTLE", 24, 8, RW, 0},
	{"S_CLKSETTLECTL", 16, 8, RW, 0},
	{"S_BYTE_CLK_ENABLE", 7, 1, RW, 0},
	{"S_DPDN_SWAP_CLK", 6, 1, RW, 0},
	{"S_DPDN_SWAP_DAT", 5, 1, RW, 0},
	{"ENABLE_DAT", 1, 4, RW, 0},
	{"ENABLE_CLK", 0, 1, RW, 0},
};

/* CSISx4 VC DMA */
enum fimc_is_hw_csi_vcdma_reg_name {
	CSIS_R_DMA0_CTRL,
	CSIS_R_DMA0_FMT,
	CSIS_R_DMA0_SKIP,
	CSIS_R_DMA0_ADDR1,
	CSIS_R_DMA0_ADDR2,
	CSIS_R_DMA0_ADDR3,
	CSIS_R_DMA0_ADDR4,
	CSIS_R_DMA0_ADDR5,
	CSIS_R_DMA0_ADDR6,
	CSIS_R_DMA0_ADDR7,
	CSIS_R_DMA0_ADDR8,
	CSIS_R_DMA0_ACT_CTRL,
	CSIS_R_DMA0_ACT_FMT,
	CSIS_R_DMA0_ACT_SKIP,
	CSIS_R_DMA0_RESOL,
	CSIS_R_DMA0_FCNTSEQ,
	CSIS_R_DMA0_FCNTSEQ_STAT,
	CSIS_VCDMA_REG_CNT
};

static struct fimc_is_reg csi_vcdma_regs[CSIS_VCDMA_REG_CNT] = {
	{0x0000, "DMA0_CTRL"},
	{0x0004, "DMA0_FMT"},
	{0x0008, "DMA0_SKIP"},
	{0x0010, "DMA0_ADDR1"},
	{0x0014, "DMA0_ADDR2"},
	{0x0018, "DMA0_ADDR3"},
	{0x001C, "DMA0_ADDR4"},
	{0x0020, "DMA0_ADDR5"},
	{0x0024, "DMA0_ADDR6"},
	{0x0028, "DMA0_ADDR7"},
	{0x002C, "DMA0_ADDR8"},
	{0x0030, "DMA0_ACT_CTRL"},
	{0x0034, "DMA0_ACT_FMT"},
	{0x0038, "DMA0_ACT_SKIP"},
	{0x0040, "DMA0_RESOL"},
	{0x0050, "DMA0_FCNTSEQ"},
	{0x0054, "DMA0_FCNTSEQ_STAT"},
};

enum fimc_is_hw_csi_vcdma_reg_field {
	CSIS_F_DMA_N_UPDT_SKIPPTR,
	CSIS_F_DMA_N_UPDT_FRAMEPTR,
	CSIS_F_DMA_N_UPDT_PTR_EN,
	CSIS_F_DMA_N_ENABLE,
	CSIS_F_DMA_N_DIM,
	CSIS_F_DMA_N_STORAGE_MODE,
	CSIS_F_DMA_N_PACK12,
	CSIS_F_DMA_N_BYTESWAP,
	CSIS_F_DMA_N_DATAFORMAT,
	CSIS_F_DMA_N_SKIP_EN,
	CSIS_F_DMA_N_SKIP_TURNPTR,
	CSIS_F_DMA_N_SKIP_SEQ,
	CSIS_F_DMA_N_ADDR1,
	CSIS_F_DMA_N_ADDR2,
	CSIS_F_DMA_N_ADDR3,
	CSIS_F_DMA_N_ADDR4,
	CSIS_F_DMA_N_ADDR5,
	CSIS_F_DMA_N_ADDR6,
	CSIS_F_DMA_N_ADDR7,
	CSIS_F_DMA_N_ADDR8,
	CSIS_F_ACTIVE_DMA_N_ABORTED,
	CSIS_F_ACTIVE_DMA_N_FRAMECNT_SEQ,
	CSIS_F_ACTIVE_DMA_N_SKIPPTR,
	CSIS_F_ACTIVE_DMA_N_FRAMEPTR,
	CSIS_F_ACTIVE_DMA_N_ENABLE,
	CSIS_F_ACTIVE_DMA_N_DIM,
	CSIS_F_ACTIVE_DMA_N_STORAGE_MODE,
	CSIS_F_ACTIVE_DMA_N_PACK12,
	CSIS_F_ACTIVE_DMA_N_BYTESWAP,
	CSIS_F_ACTIVE_DMA_N_DATAFORMAT,
	CSIS_F_ACTIVE_DMA_N_SKIP_EN,
	CSIS_F_ACTIVE_DMA_N_SKIP_TURNPTR,
	CSIS_F_ACTIVE_DMA_N_SKIP_SEQ,
	CSIS_F_DMA_N_RESOL,
	CSIS_F_FRAMECNT_SEQ,
	CSIS_F_FRAMECNT_BEFORE,
	CSIS_F_FRAMECNT_PRESENT,
	CSIS_VCDMA_REG_FIELD_CNT
};

static struct fimc_is_field csi_vcdma_fields[CSIS_VCDMA_REG_FIELD_CNT] = {
/* field_name, start_bit, bit_width, type, reset */
	{"DMA_N_UPDT_SKIPPTR", 5, 3, WO, 0},
	{"DMA_N_UPDT_FRAMEPTR", 2, 3, WO, 0},
	{"DMA_N_UPDT_PTR_EN", 1, 1, WO, 0},
	{"DMA_N_DISABLE", 0, 1, RW, 0},
	{"DMA_N_DIM", 5, 1, RW, 0},
	{"DMA_N_STORAGE_MODE", 4, 1, RW, 0},
	{"DMA_N_PACK12", 3, 1, RW, 0},
	{"DMA_N_BYTESWAP", 2, 1, RW, 0},
	{"DMA_N_DATAFORMAT", 0, 2, RW, 0},
	{"DMA_N_SKIP_EN", 31, 1, RW, 0},
	{"DMA_N_SKIP_TURNPTR", 16, 3, RW, 0},
	{"DMA_N_SKIP_SEQ", 0, 8, RW, 0},
	{"DMA_N_ADDR1", 0, 32, RW, 0},
	{"DMA_N_ADDR2", 0, 32, RW, 0},
	{"DMA_N_ADDR3", 0, 32, RW, 0},
	{"DMA_N_ADDR4", 0, 32, RW, 0},
	{"DMA_N_ADDR5", 0, 32, RW, 0},
	{"DMA_N_ADDR6", 0, 32, RW, 0},
	{"DMA_N_ADDR7", 0, 32, RW, 0},
	{"DMA_N_ADDR8", 0, 32, RW, 0},
	{"ACTIVE_DMA_N_ABORTED", 16, 1, RO, 0},
	{"ACTIVE_DMA_N_FRAMECNT_SEQ", 8, 8, RO, 0xFF},
	{"ACTIVE_DMA_N_SKIPPTR", 5, 3, RO, 0},
	{"ACTIVE_DMA_N_FRAMEPTR", 2, 3, RO, 0x7},
	{"ACTIVE_DMA_N_ENABLE", 0, 1, RO, 0},
	{"ACTIVE_DMA_N_DIM", 5, 1, RO, 0},
	{"ACTIVE_DMA_N_STORAGE_MODE", 4, 1, RO, 0},
	{"ACTIVE_DMA_N_PACK12", 3, 1, RO, 0},
	{"ACTIVE_DMA_N_BYTESWAP", 2, 1, RO, 0},
	{"ACTIVE_DMA_N_DATAFORMAT", 0, 2, RO, 0},
	{"ACTIVE_DMA_N_SKIP_EN", 31, 1, RO, 0},
	{"ACTIVE_DMA_N_SKIP_TURNPTR", 16, 3, RO, 0},
	{"ACTIVE_DMA_N_SKIP_SEQ", 0, 8, RO, 0},
	{"DMA0_RESOL", 0, 14, RW, 0},
	{"FRAMECNT_SEQ", 0, 8, RW, 0xFF},
	{"FRAMECNT_BEFORE", 7, 4, RO, 0},
	{"FRAMECNT_PRESENT", 0, 4, RO, 0},
};

/* CSISx4 VC DMA Common */
enum fimc_is_hw_csi_vcdma_cmn_reg_name {
	CSIS_R_DMA_DATA_CTRL,
	CSIS_R_DMA_INT_MASK,
	CSIS_R_DMA_INT_SRC,
	CSIS_R_DMA_CRC_RESULT,
	CSIS_R_DMA_CRC_SEL,
	CSIS_R_DMA_CMN_CTRL,
	CSIS_R_DMA_ERR_CODE,
	CSIS_R_OTF_FORMAT,
	CSIS_VCDMA_CMN_REG_CNT
};

static struct fimc_is_reg csi_vcdma_cmn_regs[CSIS_VCDMA_CMN_REG_CNT] = {
	{0x0000, "DMA_DATA_CTRL"},
	{0x0004, "DMA_INT_MASK"},
	{0x0008, "DMA_INT_SRC"},
	{0x000C, "DMA_CRC_RESULT"},
	{0x0010, "DMA_CRC_SEL"},
	{0x0014, "DMA_CMN_CTRL"},
	{0x0018, "DMA_ERR_CODE"},
	{0x001C, "OTF_FORMAT"},
};

enum fimc_is_hw_csi_vcdma_cmn_reg_field {
	CSIS_F_DMA_INPUT_PATH_CH1,
	CSIS_F_DMA_INPUT_PATH_CH0,
	CSIS_F_MSK_DMA_OTF_OVERLAP,
	CSIS_F_MSK_DMA_ABORT_DONE,
	CSIS_F_MSK_DMA_ERROR,
	CSIS_F_MSK_DMA_FRM_END,
	CSIS_F_MSK_DMA_FRM_START,
	CSIS_F_MSK_DMA_LINE_END,
	CSIS_F_DMA_OTF_OVERLAP,
	CSIS_F_DMA_ABORT_DONE,
	CSIS_F_DMA_ERROR,
	CSIS_F_DMA_FRM_END,
	CSIS_F_DMA_FRM_START,
	CSIS_F_DMA_LINE_END,
	CSIS_F_DMA_CRC_RESULT,
	CSIS_F_DMA_CRC_SEL,
	CSIS_F_DMA_ABORT_REQ,
	CSIS_F_DMAFIFO_FULL,
	CSIS_F_OTF_FORMAT,
	CSIS_VCDMA_CMN_REG_FIELD_CNT
};

static struct fimc_is_field csi_vcdma_cmn_fields[CSIS_VCDMA_CMN_REG_FIELD_CNT] = {
/* field_name, start_bit, bit_width, type, reset */
	{"DMA_INPUT_PATH_CH1", 1, 1, RW, 0},
	{"DMA_INPUT_PATH_CH0", 0, 1, RW, 0},
	{"MSK_DMA_OTF_OVERLAP", 20, 4, RW, 0},
	{"MSK_DMA_ABORT_DONE", 16, 1, RW, 0},
	{"MSK_DMA_ERROR", 12, 1, RW, 0},
	{"MSK_DMA_FRM_END", 8, 4, RW, 0},
	{"MSK_DMA_FRM_START", 4, 4, RW, 0},
	{"MSK_DMA_LINE_END", 0, 4, RW, 0},
	{"DMA_OTF_OVERLAP", 20, 4, RW, 0},
	{"DMA_ABORT_DONE", 16, 1, RW, 0},
	{"DMA_ERROR", 12, 1, RW, 0},
	{"DMA_FRM_END", 8, 4, RW, 0},
	{"DMA_FRM_START", 4, 4, RW, 0},
	{"DMA_LINE_END", 0, 4, RW, 0},
	{"DMA_CRC_RESULT", 0, 32, RW, 0},
	{"DMA_CRC_SEL", 0, 2, RW, 0},
	{"DMA_ABORT_REQ", 0, 1, RW, 0},
	{"DMAFIFO_FULL", 0, 1, RW, 0},
	{"OTF_FORMAT", 0, 2, RW, 0},
};

#ifdef USE_PHY_LINK
enum fimc_is_hw_csi_phy_reg_name {
	PHY_R_PHY_STATUS,
	PHY_R_PHY_CMN_CTRL,
	PHY_R_PHY_BCTRL_0,
	PHY_R_PHY_BCTRL_1,
	PHY_R_PHY_BCTRL_2,
	PHY_R_PHY_BCTRL_3,
	PHY_R_PHY_BCTRL_4,
	PHY_R_PHY_BCTRL_5,
	PHY_R_PHY_BCTRL_6,
	PHY_R_PHY_BCTRL_7,
	PHY_R_PHY_BCTRL_8,
	PHY_R_PHY_BCTRL_9,
	PHY_R_PHY_BCTRL_10,
	PHY_R_PHY_BCTRL_11,
	PHY_R_PHY_SCTRL_0,
	PHY_R_PHY_SCTRL_1,
	PHY_R_PHY_SCTRL_2,
	PHY_R_PHY_SCTRL_3,
	PHY_R_PHY_SCTRL_4,
	PHY_R_PHY_SCTRL_5,
	PHY_R_PHY_SCTRL_6,
	PHY_R_PHY_SCTRL_7,
	PHY_R_PHY_SCTRL_8,
	PHY_R_PHY_SCTRL_9,
	PHY_R_PHY_SCTRL_10,
	PHY_R_PHY_SCTRL_11,
	PHY_REG_CNT
};

static struct fimc_is_reg csi_phy_regs[PHY_REG_CNT] = {
	{0x0000, "PHY_STATUS"},
	{0x0004, "PHY_CMN_CTRL"},
	{0x0008, "PHY_BCTRL_0"},
	{0x000C, "PHY_BCTRL_1"},
	{0x0010, "PHY_BCTRL_2"},
	{0x0014, "PHY_BCTRL_3"},
	{0x0028, "PHY_BCTRL_4"},
	{0x002C, "PHY_BCTRL_5"},
	{0x0030, "PHY_BCTRL_6"},
	{0x0034, "PHY_BCTRL_7"},
	{0x0038, "PHY_BCTRL_8"},
	{0x003C, "PHY_BCTRL_9"},
	{0x0040, "PHY_BCTRL_10"},
	{0x0044, "PHY_BCTRL_11"},
	{0x0018, "PHY_SCTRL_0"},
	{0x001C, "PHY_SCTRL_1"},
	{0x0020, "PHY_SCTRL_2"},
	{0x0024, "PHY_SCTRL_3"},
	{0x0048, "PHY_SCTRL_4"},
	{0x004C, "PHY_SCTRL_5"},
	{0x0050, "PHY_SCTRL_6"},
	{0x0054, "PHY_SCTRL_7"},
	{0x0058, "PHY_SCTRL_8"},
	{0x005C, "PHY_SCTRL_9"},
	{0x0060, "PHY_SCTRL_10"},
	{0x0064, "PHY_SCTRL_11"},
};

/* the total count of the fields of csis v5.0's reg */
enum fimc_is_hw_csi_phy_reg_field {
	PHY_F_HSSETTLE,
	PHY_F_S_CLKSETTLECTL,
	PHY_F_S_BYTE_CLK_ENABLE,
	PHY_F_S_DPDN_SWAP_CLK,
	PHY_F_S_DPDN_SWAP_DAT,
	PHY_F_B_PHYCTRL,
	PHY_F_S_PHYCTRL,
	PHY_REG_FIELD_CNT
};

static struct fimc_is_field csi_phy_fields[PHY_REG_FIELD_CNT] = {
/* field_name, start_bit, bit_width, type, reset */
	{"HSSETTLE", 24, 8, RW, 0},
	{"S_CLKSETTLECTL", 16, 8, RW, 0},
	{"S_BYTE_CLK_ENABLE", 7, 1, RW, 0},
	{"S_DPDN_SWAP_CLK", 6, 1, RW, 0},
	{"S_DPDN_SWAP_DAT", 5, 1, RW, 0},
	{"B_PHYCTRL", 0, 32, RW, 0},
	{"S_PHYCTRL", 0, 32, RW, 0},
};
#else
enum fimc_is_hw_csi_phy_reg_name {
	PHY_R_BIAS_CTRL_01,
	PHY_R_BIAS_CTRL_02,
	PHY_R_BIAS_CTRL_03,
	PHY_R_BIAS_CTRL_04,
	PHY_R_BIAS_CTRL_05,
	PHY_R_BIAS_CTRL_06,
	PHY_R_DPHY_ACTRL_SC_06,
	PHY_R_DPHY_DCTRL_SC_02,

	PHY_R_DPHY_ACTRL_SD0_08,
	PHY_R_DPHY_ACTRL_SD1_08,
	PHY_R_DPHY_ACTRL_SD2_08,
	PHY_R_DPHY_ACTRL_SD3_08,

	PHY_R_DPHY_DCTRL_SD0_05,
	PHY_R_DPHY_DCTRL_SD1_05,
	PHY_R_DPHY_DCTRL_SD2_05,
	PHY_R_DPHY_DCTRL_SD3_05,

	PHY_R_DPHY_DCTRL_SD0_06,
	PHY_R_DPHY_DCTRL_SD1_06,
	PHY_R_DPHY_DCTRL_SD2_06,
	PHY_R_DPHY_DCTRL_SD3_06,

	PHY_R_DPHY_DCTRL_SD0_13,
	PHY_R_DPHY_DCTRL_SD1_13,
	PHY_R_DPHY_DCTRL_SD2_13,
	PHY_R_DPHY_DCTRL_SD3_13,

	PHY_REG_CNT
};

static struct fimc_is_reg csi_phy_regs[CSI_ID_MAX][PHY_REG_CNT] = {
	/* M4S4_TOP --> CSI #0 */
	{
		{0x0404, "BIAS_CTRL_01"},
		{0x0408, "BIAS_CTRL_02"},
		{0x040C, "BIAS_CTRL_03"},
		{0x0410, "BIAS_CTRL_04"},
		{0x0414, "BIAS_CTRL_05"},
		{0x0418, "BIAS_CTRL_06"},
		{0x2418, "DPHY_ACTRL_SC_06"},
		{0x2484, "DPHY_DCTRL_SC_02"},

		{0x283C, "DPHY_ACTRL_SD0_08"}, /* DCPHY_DPHY_ACTRL_SD0_08 */
		{0x2C3C, "DPHY_ACTRL_SD1_08"}, /* DCPHY_DPHY_ACTRL_SD1_08 */
		{0x303C, "DPHY_ACTRL_SD2_08"}, /* DCPHY_DPHY_ACTRL_SD2_08 */
		{0x343C, "DPHY_ACTRL_SD3_08"},

		{0x28AC, "DPHY_DCTRL_SD0_05"}, /* DCPHY_COMMON_DCTRL_SD0_12 */
		{0x2CAC, "DPHY_DCTRL_SD1_05"}, /* DCPHY_COMMON_DCTRL_SD1_12 */
		{0x30AC, "DPHY_DCTRL_SD2_05"}, /* DCPHY_COMMON_DCTRL_SD2_12 */
		{0x34AC, "DPHY_DCTRL_SD3_05"},

		{0x28B0, "DPHY_DCTRL_SD0_06"}, /* DCPHY_COMMON_DCTRL_SD0_13 */
		{0x2CB0, "DPHY_DCTRL_SD1_06"}, /* DCPHY_COMMON_DCTRL_SD1_13 */
		{0x30B0, "DPHY_DCTRL_SD2_06"}, /* DCPHY_COMMON_DCTRL_SD2_13 */
		{0x34B0, "DPHY_DCTRL_SD3_06"},

		{0x28E0, "DPHY_DCTRL_SD0_13"}, /* DCPHY_DPHY_DCTRL_SD0_01 */
		{0x2CE0, "DPHY_DCTRL_SD1_13"}, /* DCPHY_DPHY_DCTRL_SD1_01 */
		{0x30E0, "DPHY_DCTRL_SD2_13"}, /* DCPHY_DPHY_DCTRL_SD2_01 */
		{0x34E0, "DPHY_DCTRL_SD3_13"},
	},
	/* M0S4S2_S0 --> CSI #1 */
	{
		{0x0404, "BIAS_CTRL_01"},
		{0x0408, "BIAS_CTRL_02"},
		{0x040C, "BIAS_CTRL_03"},
		{0x0410, "BIAS_CTRL_04"},
		{0x0414, "BIAS_CTRL_05"},
		{0x0418, "BIAS_CTRL_06"},
		{0x1018, "DPHY_ACTRL_SC_06"},
		{0x1084, "DPHY_DCTRL_SC_02"},

		{0x143C, "DPHY_ACTRL_SD0_08"},
		{0x183C, "DPHY_ACTRL_SD1_08"},
		{0x1C3C, "DPHY_ACTRL_SD2_08"},
		{0x203C, "DPHY_ACTRL_SD3_08"},

		{0x14AC, "DPHY_DCTRL_SD0_05"},
		{0x18AC, "DPHY_DCTRL_SD1_05"},
		{0x1CAC, "DPHY_DCTRL_SD2_05"},
		{0x20AC, "DPHY_DCTRL_SD3_05"},

		{0x14B0, "DPHY_DCTRL_SD0_06"},
		{0x18B0, "DPHY_DCTRL_SD1_06"},
		{0x1CB0, "DPHY_DCTRL_SD2_06"},
		{0x20B0, "DPHY_DCTRL_SD3_06"},

		{0x14E0, "DPHY_DCTRL_SD0_13"},
		{0x18E0, "DPHY_DCTRL_SD1_13"},
		{0x1CE0, "DPHY_DCTRL_SD2_13"},
		{0x20E0, "DPHY_DCTRL_SD3_13"},
	},
	/* M4S4_MODULE --> CSI #2 */
	{
		{0x0404, "BIAS_CTRL_01"},
		{0x0408, "BIAS_CTRL_02"},
		{0x040C, "BIAS_CTRL_03"},
		{0x0410, "BIAS_CTRL_04"},
		{0x0414, "BIAS_CTRL_05"},
		{0x0418, "BIAS_CTRL_06"},
		{0x2418, "DPHY_ACTRL_SC_06"},
		{0x2484, "DPHY_DCTRL_SC_02"},

		{0x283C, "DPHY_ACTRL_SD0_08"}, /* DCPHY_DPHY_ACTRL_SD0_08 */
		{0x2C3C, "DPHY_ACTRL_SD1_08"}, /* DCPHY_DPHY_ACTRL_SD1_08 */
		{0x303C, "DPHY_ACTRL_SD2_08"}, /* DCPHY_DPHY_ACTRL_SD2_08 */
		{0x343C, "DPHY_ACTRL_SD3_08"},

		{0x28AC, "DPHY_DCTRL_SD0_05"}, /* DCPHY_COMMON_DCTRL_SD0_12 */
		{0x2CAC, "DPHY_DCTRL_SD1_05"}, /* DCPHY_COMMON_DCTRL_SD1_12 */
		{0x30AC, "DPHY_DCTRL_SD2_05"}, /* DCPHY_COMMON_DCTRL_SD2_12 */
		{0x34AC, "DPHY_DCTRL_SD3_05"},

		{0x28B0, "DPHY_DCTRL_SD0_06"}, /* DCPHY_COMMON_DCTRL_SD0_13 */
		{0x2CB0, "DPHY_DCTRL_SD1_06"}, /* DCPHY_COMMON_DCTRL_SD1_13 */
		{0x30B0, "DPHY_DCTRL_SD2_06"}, /* DCPHY_COMMON_DCTRL_SD2_13 */
		{0x34B0, "DPHY_DCTRL_SD3_06"},

		{0x28E0, "DPHY_DCTRL_SD0_13"}, /* DCPHY_DPHY_DCTRL_SD0_01 */
		{0x2CE0, "DPHY_DCTRL_SD1_13"}, /* DCPHY_DPHY_DCTRL_SD1_01 */
		{0x30E0, "DPHY_DCTRL_SD2_13"}, /* DCPHY_DPHY_DCTRL_SD2_01 */
		{0x34E0, "DPHY_DCTRL_SD3_13"},
	},
	/* M0S4S2_S2 --> CSI #3 */
	{
		{0x0404, "BIAS_CTRL_01"},
		{0x0408, "BIAS_CTRL_02"},
		{0x040C, "BIAS_CTRL_03"},
		{0x0410, "BIAS_CTRL_04"},
		{0x0414, "BIAS_CTRL_05"},
		{0x0418, "BIAS_CTRL_06"},
		{0x2418, "DPHY_ACTRL_SC_06"},
		{0x2484, "DPHY_DCTRL_SC_02"},

		{0x283C, "DPHY_ACTRL_SD0_08"},
		{0x2C3C, "DPHY_ACTRL_SD1_08"},
		{0x303C, "DPHY_ACTRL_SD2_08"},
		{0x343C, "DPHY_ACTRL_SD3_08"},

		{0x28AC, "DPHY_DCTRL_SD0_05"},
		{0x2CAC, "DPHY_DCTRL_SD1_05"},
		{0x30AC, "DPHY_DCTRL_SD2_05"},
		{0x34AC, "DPHY_DCTRL_SD3_05"},

		{0x28B0, "DPHY_DCTRL_SD0_06"},
		{0x2CB0, "DPHY_DCTRL_SD1_06"},
		{0x30B0, "DPHY_DCTRL_SD2_06"},
		{0x34B0, "DPHY_DCTRL_SD3_06"},

		{0x28E0, "DPHY_DCTRL_SD0_13"},
		{0x2CE0, "DPHY_DCTRL_SD1_13"},
		{0x30E0, "DPHY_DCTRL_SD2_13"},
		{0x34E0, "DPHY_DCTRL_SD3_13"},
	},
};

/* the total count of the fields of csis v5.0's reg */
enum fimc_is_hw_csi_phy_reg_field {
	/* DPHY_DCTRL_SC_02 */
	PHY_F_CLKSETTLECTL,
	/* DPHY_ACTRL_SD#_08 */
	PHY_F_SKEW_CAL_EXT_FORCE,
	PHY_F_SKEW_DLYSEL_1_0,
	PHY_F_RXDDRCLKHS_SEL,
	PHY_F_SEL_FDLY,
	PHY_F_UDLY_SPDCNT_1_0,
	/* DPHY_DCTRL_SD#_05 */
	PHY_F_HS_MODE_SEL,
	PHY_F_TX_SWAP_WORD,
	PHY_F_RX_SWAP_WORD,
	/* DPHY_DCTRL_SD#_06 */
	PHY_F_HSSETTLECTL,
	/* DPHY_DCTRL_SD#_13 */
	PHY_F_SKEWCAL_FAIL_TOL,
	PHY_F_SKEWCAL_CLK_SEL,
	PHY_F_SKEWCAL_EN,
	CSIS_PHY_REG_FIELD_CNT
};

static struct fimc_is_field csi_phy_fields[CSIS_PHY_REG_FIELD_CNT] = {
/* field_name, start_bit, bit_width, type, reset */
	/* DPHY_DCTRL_SC_02 */
	{"CLKSETTLECTL",	0, 8, RW, 0x1},
	/* DPHY_ACTRL_SD#_08 */
	{"SKEW_CAL_EXT_FORCE",	7, 1, RW, 0x0},
	{"SKEW_DLYSEL_1_0",	5, 2, RW, 0x0},
	{"RXDDRCLKHS_SEL",	4, 1, RW, 0x0},
	{"SEL_FDLY",		3, 1, RW, 0x1},
	{"UDLY_SPDCNT_1_0",	0, 2, RW, 0x0},
	/* DPHY_DCTRL_SD#_05 */
	{"HS_MODE_SEL",		2, 1, RW, 0x0},
	{"TX_SWAP_WORD",	1, 1, RW, 0x0},
	{"RX_SWAP_WORD",	0, 1, RW, 0x0},
	/* DPHY_DCTRL_SD#_06 */
	{"HSSETTLECTL",		0, 8, RW, 0x18},
	/* DPHY_DCTRL_SD#_13 */
	{"SKEWCAL_FAIL_TOL",	2, 2, RW, 0x0},
	{"SKEWCAL_CLK_SEL",	1, 1, RW, 0x0},
	{"SKEWCAL_EN",		0, 1, RW, 0x1},
};
#endif

/* CSISx4 Common DMA */
enum fimc_is_hw_csi_dma_reg_name {
	CSIS_DMA_R_COMMON_DMA_ARB_PRI,
	CSIS_DMA_R_COMMON_DMA_AXI_ARB_PRI,
	CSIS_DMA_R_COMMON_DMA_CTRL,
	CSIS_DMA_R_COMMON_DMA_SRAM_SPLIT,
	CSIS_DMA_R_COMMON_DMA_MATRIX,
	CSIS_DMA_R_COMMON_DMA_CLK_CTRL,
	CSIS_DMA_R_TEST_PATTERN_ENABLE,
	CSIS_DMA_R_TEST_PATTERN_CTRL,
	CSIS_DMA_R_TEST_PATTERN_RESOL,
	CSIS_DMA_REG_CNT,
};

static struct fimc_is_reg csi_dma_regs[CSIS_DMA_REG_CNT] = {
	{0x0000, "COMMON_DMA_ARB_PRI"},
	{0x0004, "COMMON_DMA_AXI_ARB_PRI"},
	{0x0008, "COMMON_DMA_CTRL"},
	{0x000C, "COMMON_DMA_SRAM_SPLIT"},
	{0x0010, "COMMON_DMA_MATRIX"},
	{0x0014, "COMMON_DMA_CLK_CTRL"},
	{0x0020, "TEST_PATTERN_ENABLE"},
	{0x0024, "TEST_PATTERN_CTRL"},
	{0x0028, "TEST_PATTERN_RESOL"},
};

enum fimc_is_hw_csi_dma_reg_field {
	CSIS_DMA_F_DMA_ARB_PRI_1,
	CSIS_DMA_F_DMA_ARB_PRI_0,
	CSIS_DMA_F_WDMA_AXI_FIXED_PRIOR,
	CSIS_DMA_F_DMA_AXI_FIXED_PRIOR_TYPE,
	CSIS_DMA_F_Q_CHANNEL_EN,
	CSIS_DMA_F_IP_PROCESSING,
	CSIS_DMA_F_SW_RESET,
	CSIS_DMA_F_DMA_SRAM1_SPLIT,
	CSIS_DMA_F_DMA_SRAM0_SPLIT,
	CSIS_DMA_F_DMA_MATRIX,
	CSIS_DMA_F_CLKGATE_OFF,
	CSIS_DMA_F_TESTPATTERN,
	CSIS_DMA_F_PPC_MODE,
	CSIS_DMA_F_VBLANK,
	CSIS_DMA_F_VTOHBLANK,
	CSIS_DMA_F_HBLANK,
	CSIS_DMA_F_HTOVBALNK,
	CSIS_DMA_F_TP_VSIZE,
	CSIS_DMA_F_TP_HSIZE,
	CSIS_DMA_FIELD_CNT,
};

static struct fimc_is_field csi_dma_fields[CSIS_DMA_FIELD_CNT] = {
/* field_name, start_bit, bit_width, type, reset */
	{"DMA_ARB_PRI_1", 2, 2, RW, 0},
	{"DMA_ARB_PRI_0", 0, 2, RW, 0},
	{"WDMA_AXI_FIXED_PRIOR", 1, 1, RW, 0},
	{"DMA_AXI_FIXED_PRIOR_TYPE", 0, 1, RW, 0},
	{"Q_CHANNEL_EN", 2, 1, RW, 1},
	{"IP_PROCESSING", 1, 1, RW, 0},
	{"SW_RESET", 0, 1, RW, 0},
	{"DMA_SRAM1_SPLIT", 16, 10, RW, 0},
	{"DMA_SRAM0_SPLIT", 0, 10, RW, 0},
	{"DMA_MATRIX", 0, 5, RW, 0},
	{"CLKGATE_OFF", 0, 1, RW, 0},
	{"TESTPATTERN", 31, 1, RW, 0},
	{"PPC_MODE", 30, 1, RW, 1},
	{"VBLANK", 0, 30, RW, 0x3FFF},
	{"VTOHBLANK", 16, 8, RW, 0x40},
	{"HBLANK", 8, 8, RW, 0x40},
	{"HTOVBALNK", 0, 8, RW, 0x40},
	{"TP_VSIZE", 16, 14, RW, 0x10},
	{"TP_HSIZE", 0, 14, RW, 0x10},
};

#endif

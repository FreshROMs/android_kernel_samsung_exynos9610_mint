/*
 * samsung EXYNOS FIMC-IS2 (Imaging Subsystem) driver
 *
 *  Copyright (C) 2016 Samsung Electronics Co., Ltd.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License version 2 as
 *  published by the Free Software Foundation.
 */

#ifndef FIMC_IS_VIRTUAL_OTF_H
#define FIMC_IS_VIRTUAL_OTF_H

#include "fimc-is-hw-api-common.h"

#define C2SYNC_1SLV_BASE_ADDR		0x16BF0000
#define C2SYNC_2SLV_BASE_ADDR		0x16AF0000

enum c2sync_s1_reg_name {
	C2SYNC_M0_S1_R_TRS_ENABLE0,
	C2SYNC_M0_S1_R_TRS_LIMIT0,
	C2SYNC_M0_S1_R_TRS_TOKENS_CROP_START0,
	C2SYNC_M0_S1_R_TRS_CROP_ENABLE0,
	C2SYNC_M0_S1_R_TRS_LINES_IN_FIRST_TOKEN0,
	C2SYNC_M0_S1_R_TRS_LINES_IN_TOKEN0,
	C2SYNC_M0_S1_R_LINES_COUNT0,
	C2SYNC_M0_S1_R_TRS_FLUSH0,
	C2SYNC_M0_S1_R_TRS_BUSY0,
	C2SYNC_M0_S1_R_C2COM_DEBUG,
	C2SYNC_M0_S1_R_C2COM_DEBUG_DOUT,
	C2SYNC_M0_S1_R_C2COM_RING_CLK_EN,
	C2SYNC_M0_S1_R_C2COM_LOCAL_IP,
	C2SYNC_M0_S1_R_SW_RESET,
	C2SYNC_M0_S1_R_SW_CORE_RESET,
	C2SYNC_M0_S1_R_FORCE_INTERNAL_CLOCK,
	C2SYNC_M0_S1_R_SELREGISTER,
	C2SYNC_M0_S1_R_SELREGISTERMODE,
	C2SYNC_M0_S1_R_SHADOW_SW_TRIGGER,
	C2SYNC_M0_S1_REG_CNT
};

static const struct fimc_is_reg c2sync_s1_regs[C2SYNC_M0_S1_REG_CNT] = {
	{0x0, "TRS_ENABLE0"},
	{0x4, "TRS_LIMIT0"},
	{0x8, "TRS_TOKENS_CROP_START0"},
	{0xc, "TRS_CROP_ENABLE0"},
	{0x10, "TRS_LINES_IN_FIRST_TOKEN0"},
	{0x14, "TRS_LINES_IN_TOKEN0"},
	{0x18, "LINES_COUNT0"},
	{0x1c, "TRS_FLUSH0"},
	{0x20, "TRS_BUSY0"},
	{0x24, "C2COM_DEBUG"},
	{0x28, "C2COM_DEBUG_DOUT"},
	{0x2c, "C2COM_RING_CLK_EN"},
	{0x30, "C2COM_LOCAL_IP"},
	{0x34, "SW_RESET"},
	{0x38, "SW_CORE_RESET"},
	{0x3c, "FORCE_INTERNAL_CLOCK"},
	{0x40, "SELREGISTER"},
	{0x44, "SELREGISTERMODE"},
	{0x4c, "SHADOW_SW_TRIGGER"},
};

enum fimc_is_c2sync_s1_reg_field {
	C2SYNC_M0_S1_F_TRS_ENABLE0,
	C2SYNC_M0_S1_F_TRS_LIMIT0,
	C2SYNC_M0_S1_F_TRS_TOKENS_CROP_START0,
	C2SYNC_M0_S1_F_TRS_CROP_ENABLE0,
	C2SYNC_M0_S1_F_TRS_LINES_IN_FIRST_TOKEN0,
	C2SYNC_M0_S1_F_TRS_LINES_IN_TOKEN0,
	C2SYNC_M0_S1_F_LINES_COUNT0,
	C2SYNC_M0_S1_F_TRS_FLUSH0,
	C2SYNC_M0_S1_F_TRS_BUSY0,
	C2SYNC_M0_S1_F_C2COM_DEBUG_SEL,
	C2SYNC_M0_S1_F_C2COM_DEBUG_EN,
	C2SYNC_M0_S1_F_C2COM_DEBUG_DOUT,
	C2SYNC_M0_S1_F_C2COM_RING_CLK_EN,
	C2SYNC_M0_S1_F_C2COM_LOCAL_IP,
	C2SYNC_M0_S1_F_SW_RESET,
	C2SYNC_M0_S1_F_SW_CORE_RESET,
	C2SYNC_M0_S1_F_FORCE_INTERNAL_CLOCK,
	C2SYNC_M0_S1_F_SELREGISTER,
	C2SYNC_M0_S1_F_SELREGISTERMODE,
	C2SYNC_M0_S1_F_SHADOW_SW_TRIGGER,
	C2SYNC_M0_S1_REG_FIELD_CNT
};

/* RiW : write only / RWi : Read only  / RW : read write */
static const struct fimc_is_field c2sync_s1_fields[C2SYNC_M0_S1_REG_FIELD_CNT] = {
	/* 1.register name 2.bit start 3.bit width 4.access type 5. reset */
	{"TRS_ENABLE0", 0, 1, RW, 0x1},
	{"TRS_LIMIT0", 0, 8, RW, 0x19},
	{"TRS_TOKENS_CROP_START0", 0, 12, RW, 0x0},
	{"TRS_CROP_ENABLE0", 0, 1, RW, 0x0},
	{"TRS_LINES_IN_FIRST_TOKEN0", 0, 8, RW, 0x2},
	{"TRS_LINES_IN_TOKEN0", 0, 8, RW, 0x2},
	{"LINES_COUNT0", 0, 14, RW, 0x2000},
	{"TRS_FLUSH0", 0, 1, RIW, 0x0},
	{"TRS_BUSY0", 0, 1, RWI, 0x0},
	{"C2COM_DEBUG", 1, 8, RW, 0x0},
	{"C2COM_DEBUG", 0, 1, RW, 0x0},
	{"C2COM_DEBUG_DOUT", 0, 16, RWI, 0x0},
	{"C2COM_RING_CLK_EN", 0, 1, RW, 0x0},
	{"C2COM_LOCAL_IP", 0, 4, RW, 0x3},
	{"SW_RESET", 0, 1, RIW, 0x0},
	{"SW_CORE_RESET", 0, 1, RIW, 0x0},
	{"FORCE_INTERNAL_CLOCK", 0, 1, RW, 0x0},
	{"SELREGISTER", 0, 1, RW, 0x0},
	{"SELREGISTERMODE", 0, 1, RW, 0x0},
	{"SHADOW_SW_TRIGGER", 0, 1, RIW, 0x0},
};


/* SLAVE2 */
enum c2sync_s2_reg_name {
	C2SYNC_M0_S2_R_TRS_ENABLE0,
	C2SYNC_M0_S2_R_TRS_LIMIT0,
	C2SYNC_M0_S2_R_TRS_TOKENS_CROP_START0,
	C2SYNC_M0_S2_R_TRS_CROP_ENABLE0,
	C2SYNC_M0_S2_R_TRS_LINES_IN_FIRST_TOKEN0,
	C2SYNC_M0_S2_R_TRS_LINES_IN_TOKEN0,
	C2SYNC_M0_S2_R_LINES_COUNT0,
	C2SYNC_M0_S2_R_TRS_FLUSH0,
	C2SYNC_M0_S2_R_TRS_BUSY0,
	C2SYNC_M0_S2_R_TRS_ENABLE1,
	C2SYNC_M0_S2_R_TRS_LIMIT1,
	C2SYNC_M0_S2_R_TRS_TOKENS_CROP_START1,
	C2SYNC_M0_S2_R_TRS_CROP_ENABLE1,
	C2SYNC_M0_S2_R_TRS_LINES_IN_FIRST_TOKEN1,
	C2SYNC_M0_S2_R_TRS_LINES_IN_TOKEN1,
	C2SYNC_M0_S2_R_LINES_COUNT1,
	C2SYNC_M0_S2_R_TRS_FLUSH1,
	C2SYNC_M0_S2_R_TRS_BUSY1,
	C2SYNC_M0_S2_R_C2COM_DEBUG,
	C2SYNC_M0_S2_R_C2COM_DEBUG_DOUT,
	C2SYNC_M0_S2_R_C2COM_RING_CLK_EN,
	C2SYNC_M0_S2_R_C2COM_LOCAL_IP,
	C2SYNC_M0_S2_R_SW_RESET,
	C2SYNC_M0_S2_R_SW_CORE_RESET,
	C2SYNC_M0_S2_R_FORCE_INTERNAL_CLOCK,
	C2SYNC_M0_S2_R_SELREGISTER,
	C2SYNC_M0_S2_R_SELREGISTERMODE,
	C2SYNC_M0_S2_R_SHADOW_SW_TRIGGER,
	C2SYNC_M0_S2_REG_CNT
};

static const struct fimc_is_reg c2sync_s2_regs[C2SYNC_M0_S2_REG_CNT] = {
	{0x0, "TRS_ENABLE0"},
	{0x4, "TRS_LIMIT0"},
	{0x8, "TRS_TOKENS_CROP_START0"},
	{0xc, "TRS_CROP_ENABLE0"},
	{0x10, "TRS_LINES_IN_FIRST_TOKEN0"},
	{0x14, "TRS_LINES_IN_TOKEN0"},
	{0x18, "LINES_COUNT0"},
	{0x1c, "TRS_FLUSH0"},
	{0x20, "TRS_BUSY0"},
	{0x24, "TRS_ENABLE1"},
	{0x28, "TRS_LIMIT1"},
	{0x2c, "TRS_TOKENS_CROP_START1"},
	{0x30, "TRS_CROP_ENABLE1"},
	{0x34, "TRS_LINES_IN_FIRST_TOKEN1"},
	{0x38, "TRS_LINES_IN_TOKEN1"},
	{0x3c, "LINES_COUNT1"},
	{0x40, "TRS_FLUSH1"},
	{0x44, "TRS_BUSY1"},
	{0x48, "C2COM_DEBUG"},
	{0x4c, "C2COM_DEBUG_DOUT"},
	{0x50, "C2COM_RING_CLK_EN"},
	{0x54, "C2COM_LOCAL_IP"},
	{0x58, "SW_RESET"},
	{0x5c, "SW_CORE_RESET"},
	{0x60, "FORCE_INTERNAL_CLOCK"},
	{0x64, "SELREGISTER"},
	{0x68, "SELREGISTERMODE"},
	{0x6c, "SHADOW_SW_TRIGGER"},
};

enum fimc_is_c2sync_s2_reg_field {
	C2SYNC_M0_S2_F_TRS_ENABLE0,
	C2SYNC_M0_S2_F_TRS_LIMIT0,
	C2SYNC_M0_S2_F_TRS_TOKENS_CROP_START0,
	C2SYNC_M0_S2_F_TRS_CROP_ENABLE0,
	C2SYNC_M0_S2_F_TRS_LINES_IN_FIRST_TOKEN0,
	C2SYNC_M0_S2_F_TRS_LINES_IN_TOKEN0,
	C2SYNC_M0_S2_F_LINES_COUNT0,
	C2SYNC_M0_S2_F_TRS_FLUSH0,
	C2SYNC_M0_S2_F_TRS_BUSY0,
	C2SYNC_M0_S2_F_TRS_ENABLE1,
	C2SYNC_M0_S2_F_TRS_LIMIT1,
	C2SYNC_M0_S2_F_TRS_TOKENS_CROP_START1,
	C2SYNC_M0_S2_F_TRS_CROP_ENABLE1,
	C2SYNC_M0_S2_F_TRS_LINES_IN_FIRST_TOKEN1,
	C2SYNC_M0_S2_F_TRS_LINES_IN_TOKEN1,
	C2SYNC_M0_S2_F_LINES_COUNT1,
	C2SYNC_M0_S2_F_TRS_FLUSH1,
	C2SYNC_M0_S2_F_TRS_BUSY1,
	C2SYNC_M0_S2_F_C2COM_DEBUG_SEL,
	C2SYNC_M0_S2_F_C2COM_DEBUG_EN,
	C2SYNC_M0_S2_F_C2COM_DEBUG_DOUT,
	C2SYNC_M0_S2_F_C2COM_RING_CLK_EN,
	C2SYNC_M0_S2_F_C2COM_LOCAL_IP,
	C2SYNC_M0_S2_F_SW_RESET,
	C2SYNC_M0_S2_F_SW_CORE_RESET,
	C2SYNC_M0_S2_F_FORCE_INTERNAL_CLOCK,
	C2SYNC_M0_S2_F_SELREGISTER,
	C2SYNC_M0_S2_F_SELREGISTERMODE,
	C2SYNC_M0_S2_F_SHADOW_SW_TRIGGER,
	C2SYNC_M0_S2_REG_FIELD_CNT
};

/* RiW : write only / RWi : Read only  / RW : read write */
static const struct fimc_is_field c2sync_s2_fields[C2SYNC_M0_S2_REG_FIELD_CNT] = {
	/* 1.register name 2.bit start 3.bit width 4.access type 5. reset */
	{"TRS_ENABLE0", 0, 1, RW, 0x1},
	{"TRS_LIMIT0", 0, 8, RW, 0x19},
	{"TRS_TOKENS_CROP_START0", 0, 12, RW, 0x0},
	{"TRS_CROP_ENABLE0", 0, 1, RW, 0x0},
	{"TRS_LINES_IN_FIRST_TOKEN0", 0, 8, RW, 0x2},
	{"TRS_LINES_IN_TOKEN0", 0, 8, RW, 0x2},
	{"LINES_COUNT0", 0, 14, RW, 0x2000},
	{"TRS_FLUSH0", 0, 1, RIW, 0x0},
	{"TRS_BUSY0", 0, 1, RWI, 0x0},
	{"TRS_ENABLE1", 0, 1, RW, 0x1},
	{"TRS_LIMIT1", 0, 8, RW, 0x19},
	{"TRS_TOKENS_CROP_START1", 0, 12, RW, 0x0},
	{"TRS_CROP_ENABLE1", 0, 1, RW, 0x0},
	{"TRS_LINES_IN_FIRST_TOKEN1", 0, 8, RW, 0x2},
	{"TRS_LINES_IN_TOKEN1", 0, 8, RW, 0x2},
	{"LINES_COUNT1", 0, 14, RW, 0x2000},
	{"TRS_FLUSH1", 0, 1, RIW, 0x0},
	{"TRS_BUSY1", 0, 1, RWI, 0x0},
	{"C2COM_DEBUG", 1, 8, RW, 0x0},
	{"C2COM_DEBUG", 0, 1, RW, 0x0},
	{"C2COM_DEBUG_DOUT", 0, 16, RWI, 0x0},
	{"C2COM_RING_CLK_EN", 0, 1, RW, 0x0},
	{"C2COM_LOCAL_IP", 0, 4, RW, 0x4},
	{"SW_RESET", 0, 1, RIW, 0x0},
	{"SW_CORE_RESET", 0, 1, RIW, 0x0},
	{"FORCE_INTERNAL_CLOCK", 0, 1, RW, 0x0},
	{"SELREGISTER", 0, 1, RW, 0x0},
	{"SELREGISTERMODE", 0, 1, RW, 0x0},
	{"SHADOW_SW_TRIGGER", 0, 1, RIW, 0x0},
};

void fimc_is_hw_virtual_otf_clk_enable(bool enable);
void fimc_is_hw_c2sync_s1_cfg(bool trs_en, u32 token_line, u32 height);
void fimc_is_hw_c2sync_s2_cfg(bool trs_en_0, u32 token_line_0, u32 height_0,
	bool trs_en_1, u32 token_line_1, u32 height_1);

#endif

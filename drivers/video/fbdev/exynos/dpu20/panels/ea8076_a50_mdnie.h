#ifndef __EA8076_MDNIE_H__
#define __EA8076_MDNIE_H__

/* 2018.12.26 */

static struct mdnie_scr_info scr_info = {
	.index = 5,
	.cr = 2,		/* ASCR_WIDE_CR[7:0] */
	.wr = 20,		/* ASCR_WIDE_WR[7:0] */
	.wg = 21,		/* ASCR_WIDE_WG[7:0] */
	.wb = 22		/* ASCR_WIDE_WB[7:0] */
};

static struct mdnie_night_info night_info = {
	.max_w = 21,
	.max_h = 11
};

static struct mdnie_color_lens_info color_lens_info = {
	.max_color = 12,
	.max_level = 9,
	.max_w = 21
};

static inline int color_offset_f1(int x, int y)
{
	return ((y << 10) - (((x << 10) * 39) / 38) - (95 << 10)) >> 10;
}
static inline int color_offset_f2(int x, int y)
{
	return ((y << 10) - (((x << 10) * 36) / 35) - (56 << 10)) >> 10;
}
static inline int color_offset_f3(int x, int y)
{
	return ((y << 10) + (((x << 10) * 7) / 1) - (24728 << 10)) >> 10;
}
static inline int color_offset_f4(int x, int y)
{
	return ((y << 10) + (((x << 10) * 25) / 7) - (14031 << 10)) >> 10;
}

/* color coordination order is WR, WG, WB */
static unsigned char coordinate_data_1[] = {
	0xff, 0xff, 0xff, /* dummy */
	0xff, 0xfd, 0xfc, /* Tune_1 */
	0xff, 0xfe, 0xff, /* Tune_2 */
	0xfc, 0xfc, 0xff, /* Tune_3 */
	0xff, 0xfe, 0xfd, /* Tune_4 */
	0xff, 0xff, 0xff, /* Tune_5 */
	0xfc, 0xfd, 0xff, /* Tune_6 */
	0xfe, 0xff, 0xfc, /* Tune_7 */
	0xfe, 0xff, 0xfe, /* Tune_8 */
	0xfc, 0xfe, 0xff, /* Tune_9 */
};

static unsigned char coordinate_data_2[] = {
	0xff, 0xff, 0xff, /* dummy */
	0xff, 0xfa, 0xf0, /* Tune_1 */
	0xff, 0xfa, 0xf0, /* Tune_2 */
	0xff, 0xfa, 0xf0, /* Tune_3 */
	0xff, 0xfa, 0xf0, /* Tune_4 */
	0xff, 0xfa, 0xf0, /* Tune_5 */
	0xff, 0xfa, 0xf0, /* Tune_6 */
	0xff, 0xfa, 0xf0, /* Tune_7 */
	0xff, 0xfa, 0xf0, /* Tune_8 */
	0xff, 0xfa, 0xf0, /* Tune_9 */
};

static unsigned char *coordinate_data[MODE_MAX] = {
	coordinate_data_2,
	coordinate_data_2,
	coordinate_data_2,
	coordinate_data_1,
	coordinate_data_1,
	coordinate_data_1,
};

static unsigned char adjust_ldu_data_1[] = {
	0xff, 0xff, 0xff,
	0xf6, 0xfa, 0xff,
	0xf4, 0xf8, 0xff,
	0xe9, 0xf2, 0xff,
	0xe2, 0xef, 0xff,
	0xd4, 0xe8, 0xff,
};

static unsigned char adjust_ldu_data_2[] = {
	0xff, 0xfa, 0xf1,
	0xff, 0xfd, 0xf8,
	0xff, 0xfd, 0xfa,
	0xfa, 0xfd, 0xff,
	0xf5, 0xfb, 0xff,
	0xe5, 0xf3, 0xff,
};

static unsigned char *adjust_ldu_data[MODE_MAX] = {
	adjust_ldu_data_2,
	adjust_ldu_data_2,
	adjust_ldu_data_2,
	adjust_ldu_data_1,
	adjust_ldu_data_1,
	adjust_ldu_data_1,
};

static unsigned char color_lens_data[] = {
	//Blue
	0xcc, 0x00, 0x33, 0x00, 0xcc, 0x33, 0x00, 0x00, 0xff, 0x00, 0xcc, 0xff, 0xcc, 0x00, 0xff, 0xcc, 0xcc, 0x33, 0xcc, 0xcc, 0xff, /* 20% */
	0xbf, 0x00, 0x40, 0x00, 0xbf, 0x40, 0x00, 0x00, 0xff, 0x00, 0xbf, 0xff, 0xbf, 0x00, 0xff, 0xbf, 0xbf, 0x40, 0xbf, 0xbf, 0xff, /* 25% */
	0xb2, 0x00, 0x4d, 0x00, 0xb2, 0x4d, 0x00, 0x00, 0xff, 0x00, 0xb2, 0xff, 0xb2, 0x00, 0xff, 0xb2, 0xb2, 0x4d, 0xb2, 0xb2, 0xff, /* 30% */
	0xa6, 0x00, 0x59, 0x00, 0xa6, 0x59, 0x00, 0x00, 0xff, 0x00, 0xa6, 0xff, 0xa6, 0x00, 0xff, 0xa6, 0xa6, 0x59, 0xa6, 0xa6, 0xff, /* 35% */
	0x99, 0x00, 0x66, 0x00, 0x99, 0x66, 0x00, 0x00, 0xff, 0x00, 0x99, 0xff, 0x99, 0x00, 0xff, 0x99, 0x99, 0x66, 0x99, 0x99, 0xff, /* 40% */
	0x8c, 0x00, 0x73, 0x00, 0x8c, 0x73, 0x00, 0x00, 0xff, 0x00, 0x8c, 0xff, 0x8c, 0x00, 0xff, 0x8c, 0x8c, 0x73, 0x8c, 0x8c, 0xff, /* 45% */
	0x7f, 0x00, 0x80, 0x00, 0x7f, 0x80, 0x00, 0x00, 0xff, 0x00, 0x7f, 0xff, 0x7f, 0x00, 0xff, 0x7f, 0x7f, 0x80, 0x7f, 0x7f, 0xff, /* 50% */
	0x73, 0x00, 0x8c, 0x00, 0x73, 0x8c, 0x00, 0x00, 0xff, 0x00, 0x73, 0xff, 0x73, 0x00, 0xff, 0x73, 0x73, 0x8c, 0x73, 0x73, 0xff, /* 55% */
	0x66, 0x00, 0x99, 0x00, 0x66, 0x99, 0x00, 0x00, 0xff, 0x00, 0x66, 0xff, 0x66, 0x00, 0xff, 0x66, 0x66, 0x99, 0x66, 0x66, 0xff, /* 60% */
					                                      
	//Azure			                                      
	0xcc, 0x19, 0x33, 0x00, 0xe5, 0x33, 0x00, 0x19, 0xff, 0x00, 0xe5, 0xff, 0xcc, 0x19, 0xff, 0xcc, 0xe5, 0x33, 0xcc, 0xe5, 0xff, /* 20% */
	0xbf, 0x20, 0x40, 0x00, 0xdf, 0x40, 0x00, 0x20, 0xff, 0x00, 0xdf, 0xff, 0xbf, 0x20, 0xff, 0xbf, 0xdf, 0x40, 0xbf, 0xdf, 0xff, /* 25% */
	0xb2, 0x26, 0x4d, 0x00, 0xd8, 0x4d, 0x00, 0x26, 0xff, 0x00, 0xd8, 0xff, 0xb2, 0x26, 0xff, 0xb2, 0xd8, 0x4d, 0xb2, 0xd8, 0xff, /* 30% */
	0xa6, 0x2c, 0x59, 0x00, 0xd2, 0x59, 0x00, 0x2c, 0xff, 0x00, 0xd2, 0xff, 0xa6, 0x2c, 0xff, 0xa6, 0xd2, 0x59, 0xa6, 0xd2, 0xff, /* 35% */
	0x99, 0x33, 0x66, 0x00, 0xcc, 0x66, 0x00, 0x33, 0xff, 0x00, 0xcc, 0xff, 0x99, 0x33, 0xff, 0x99, 0xcc, 0x66, 0x99, 0xcc, 0xff, /* 40% */
	0x8c, 0x39, 0x73, 0x00, 0xc5, 0x73, 0x00, 0x39, 0xff, 0x00, 0xc5, 0xff, 0x8c, 0x39, 0xff, 0x8c, 0xc5, 0x73, 0x8c, 0xc5, 0xff, /* 45% */
	0x7f, 0x40, 0x80, 0x00, 0xbf, 0x80, 0x00, 0x40, 0xff, 0x00, 0xbf, 0xff, 0x7f, 0x40, 0xff, 0x7f, 0xbf, 0x80, 0x7f, 0xbf, 0xff, /* 50% */
	0x73, 0x46, 0x8c, 0x00, 0xb9, 0x8c, 0x00, 0x46, 0xff, 0x00, 0xb9, 0xff, 0x73, 0x46, 0xff, 0x73, 0xb9, 0x8c, 0x73, 0xb9, 0xff, /* 55% */
	0x66, 0x4c, 0x99, 0x00, 0xb2, 0x99, 0x00, 0x4c, 0xff, 0x00, 0xb2, 0xff, 0x66, 0x4c, 0xff, 0x66, 0xb2, 0x99, 0x66, 0xb2, 0xff, /* 60% */
					                                      
	//Cyan			                                      
	0xcc, 0x33, 0x33, 0x00, 0xff, 0x33, 0x00, 0x33, 0xff, 0x00, 0xff, 0xff, 0xcc, 0x33, 0xff, 0xcc, 0xff, 0x33, 0xcc, 0xff, 0xff, /* 20% */
	0xbf, 0x40, 0x40, 0x00, 0xff, 0x40, 0x00, 0x40, 0xff, 0x00, 0xff, 0xff, 0xbf, 0x40, 0xff, 0xbf, 0xff, 0x40, 0xbf, 0xff, 0xff, /* 25% */
	0xb2, 0x4d, 0x4d, 0x00, 0xff, 0x4d, 0x00, 0x4d, 0xff, 0x00, 0xff, 0xff, 0xb2, 0x4d, 0xff, 0xb2, 0xff, 0x4d, 0xb2, 0xff, 0xff, /* 30% */
	0xa6, 0x59, 0x59, 0x00, 0xff, 0x59, 0x00, 0x59, 0xff, 0x00, 0xff, 0xff, 0xa6, 0x59, 0xff, 0xa6, 0xff, 0x59, 0xa6, 0xff, 0xff, /* 35% */
	0x99, 0x66, 0x66, 0x00, 0xff, 0x66, 0x00, 0x66, 0xff, 0x00, 0xff, 0xff, 0x99, 0x66, 0xff, 0x99, 0xff, 0x66, 0x99, 0xff, 0xff, /* 40% */
	0x8c, 0x73, 0x73, 0x00, 0xff, 0x73, 0x00, 0x73, 0xff, 0x00, 0xff, 0xff, 0x8c, 0x73, 0xff, 0x8c, 0xff, 0x73, 0x8c, 0xff, 0xff, /* 45% */
	0x7f, 0x80, 0x80, 0x00, 0xff, 0x80, 0x00, 0x80, 0xff, 0x00, 0xff, 0xff, 0x7f, 0x80, 0xff, 0x7f, 0xff, 0x80, 0x7f, 0xff, 0xff, /* 50% */
	0x73, 0x8c, 0x8c, 0x00, 0xff, 0x8c, 0x00, 0x8c, 0xff, 0x00, 0xff, 0xff, 0x73, 0x8c, 0xff, 0x73, 0xff, 0x8c, 0x73, 0xff, 0xff, /* 55% */
	0x66, 0x99, 0x99, 0x00, 0xff, 0x99, 0x00, 0x99, 0xff, 0x00, 0xff, 0xff, 0x66, 0x99, 0xff, 0x66, 0xff, 0x99, 0x66, 0xff, 0xff, /* 60% */
					                                      
	//Spring green	                                      
	0xcc, 0x33, 0x19, 0x00, 0xff, 0x19, 0x00, 0x33, 0xe5, 0x00, 0xff, 0xe5, 0xcc, 0x33, 0xe5, 0xcc, 0xff, 0x19, 0xcc, 0xff, 0xe5, /* 20% */
	0xbf, 0x40, 0x20, 0x00, 0xff, 0x20, 0x00, 0x40, 0xdf, 0x00, 0xff, 0xdf, 0xbf, 0x40, 0xdf, 0xbf, 0xff, 0x20, 0xbf, 0xff, 0xdf, /* 25% */
	0xb2, 0x4d, 0x26, 0x00, 0xff, 0x26, 0x00, 0x4d, 0xd8, 0x00, 0xff, 0xd8, 0xb2, 0x4d, 0xd8, 0xb2, 0xff, 0x26, 0xb2, 0xff, 0xd8, /* 30% */
	0xa6, 0x59, 0x2c, 0x00, 0xff, 0x2c, 0x00, 0x59, 0xd2, 0x00, 0xff, 0xd2, 0xa6, 0x59, 0xd2, 0xa6, 0xff, 0x2c, 0xa6, 0xff, 0xd2, /* 35% */
	0x99, 0x66, 0x33, 0x00, 0xff, 0x33, 0x00, 0x66, 0xcc, 0x00, 0xff, 0xcc, 0x99, 0x66, 0xcc, 0x99, 0xff, 0x33, 0x99, 0xff, 0xcc, /* 40% */
	0x8c, 0x73, 0x39, 0x00, 0xff, 0x39, 0x00, 0x73, 0xc5, 0x00, 0xff, 0xc5, 0x8c, 0x73, 0xc5, 0x8c, 0xff, 0x39, 0x8c, 0xff, 0xc5, /* 45% */
	0x7f, 0x80, 0x40, 0x00, 0xff, 0x40, 0x00, 0x80, 0xbf, 0x00, 0xff, 0xbf, 0x7f, 0x80, 0xbf, 0x7f, 0xff, 0x40, 0x7f, 0xff, 0xbf, /* 50% */
	0x73, 0x8c, 0x46, 0x00, 0xff, 0x46, 0x00, 0x8c, 0xb9, 0x00, 0xff, 0xb9, 0x73, 0x8c, 0xb9, 0x73, 0xff, 0x46, 0x73, 0xff, 0xb9, /* 55% */
	0x66, 0x99, 0x4c, 0x00, 0xff, 0x4c, 0x00, 0x99, 0xb2, 0x00, 0xff, 0xb2, 0x66, 0x99, 0xb2, 0x66, 0xff, 0x4c, 0x66, 0xff, 0xb2, /* 60% */
					                                      
	//Green			                                      
	0xcc, 0x33, 0x00, 0x00, 0xff, 0x00, 0x00, 0x33, 0xcc, 0x00, 0xff, 0xcc, 0xcc, 0x33, 0xcc, 0xcc, 0xff, 0x00, 0xcc, 0xff, 0xcc, /* 20% */
	0xbf, 0x40, 0x00, 0x00, 0xff, 0x00, 0x00, 0x40, 0xbf, 0x00, 0xff, 0xbf, 0xbf, 0x40, 0xbf, 0xbf, 0xff, 0x00, 0xbf, 0xff, 0xbf, /* 25% */
	0xb2, 0x4d, 0x00, 0x00, 0xff, 0x00, 0x00, 0x4d, 0xb2, 0x00, 0xff, 0xb2, 0xb2, 0x4d, 0xb2, 0xb2, 0xff, 0x00, 0xb2, 0xff, 0xb2, /* 30% */
	0xa6, 0x59, 0x00, 0x00, 0xff, 0x00, 0x00, 0x59, 0xa6, 0x00, 0xff, 0xa6, 0xa6, 0x59, 0xa6, 0xa6, 0xff, 0x00, 0xa6, 0xff, 0xa6, /* 35% */
	0x99, 0x66, 0x00, 0x00, 0xff, 0x00, 0x00, 0x66, 0x99, 0x00, 0xff, 0x99, 0x99, 0x66, 0x99, 0x99, 0xff, 0x00, 0x99, 0xff, 0x99, /* 40% */
	0x8c, 0x73, 0x00, 0x00, 0xff, 0x00, 0x00, 0x73, 0x8c, 0x00, 0xff, 0x8c, 0x8c, 0x73, 0x8c, 0x8c, 0xff, 0x00, 0x8c, 0xff, 0x8c, /* 45% */
	0x7f, 0x80, 0x00, 0x00, 0xff, 0x00, 0x00, 0x80, 0x7f, 0x00, 0xff, 0x7f, 0x7f, 0x80, 0x7f, 0x7f, 0xff, 0x00, 0x7f, 0xff, 0x7f, /* 50% */
	0x73, 0x8c, 0x00, 0x00, 0xff, 0x00, 0x00, 0x8c, 0x73, 0x00, 0xff, 0x73, 0x73, 0x8c, 0x73, 0x73, 0xff, 0x00, 0x73, 0xff, 0x73, /* 55% */
	0x66, 0x99, 0x00, 0x00, 0xff, 0x00, 0x00, 0x99, 0x66, 0x00, 0xff, 0x66, 0x66, 0x99, 0x66, 0x66, 0xff, 0x00, 0x66, 0xff, 0x66, /* 60% */
					                                      
	//Chartreuse Gre                                      
	0xe5, 0x33, 0x00, 0x19, 0xff, 0x00, 0x19, 0x33, 0xcc, 0x19, 0xff, 0xcc, 0xe5, 0x33, 0xcc, 0xe5, 0xff, 0x00, 0xe5, 0xff, 0xcc, /* 20% */
	0xdf, 0x40, 0x00, 0x20, 0xff, 0x00, 0x20, 0x40, 0xbf, 0x20, 0xff, 0xbf, 0xdf, 0x40, 0xbf, 0xdf, 0xff, 0x00, 0xdf, 0xff, 0xbf, /* 25% */
	0xd8, 0x4d, 0x00, 0x26, 0xff, 0x00, 0x26, 0x4d, 0xb2, 0x26, 0xff, 0xb2, 0xd8, 0x4d, 0xb2, 0xd8, 0xff, 0x00, 0xd8, 0xff, 0xb2, /* 30% */
	0xd2, 0x59, 0x00, 0x2c, 0xff, 0x00, 0x2c, 0x59, 0xa6, 0x2c, 0xff, 0xa6, 0xd2, 0x59, 0xa6, 0xd2, 0xff, 0x00, 0xd2, 0xff, 0xa6, /* 35% */
	0xcc, 0x66, 0x00, 0x33, 0xff, 0x00, 0x33, 0x66, 0x99, 0x33, 0xff, 0x99, 0xcc, 0x66, 0x99, 0xcc, 0xff, 0x00, 0xcc, 0xff, 0x99, /* 40% */
	0xc5, 0x73, 0x00, 0x39, 0xff, 0x00, 0x39, 0x73, 0x8c, 0x39, 0xff, 0x8c, 0xc5, 0x73, 0x8c, 0xc5, 0xff, 0x00, 0xc5, 0xff, 0x8c, /* 45% */
	0xbf, 0x80, 0x00, 0x40, 0xff, 0x00, 0x40, 0x80, 0x7f, 0x40, 0xff, 0x7f, 0xbf, 0x80, 0x7f, 0xbf, 0xff, 0x00, 0xbf, 0xff, 0x7f, /* 50% */
	0xb9, 0x8c, 0x00, 0x46, 0xff, 0x00, 0x46, 0x8c, 0x73, 0x46, 0xff, 0x73, 0xb9, 0x8c, 0x73, 0xb9, 0xff, 0x00, 0xb9, 0xff, 0x73, /* 55% */
	0xb2, 0x99, 0x00, 0x4c, 0xff, 0x00, 0x4c, 0x99, 0x66, 0x4c, 0xff, 0x66, 0xb2, 0x99, 0x66, 0xb2, 0xff, 0x00, 0xb2, 0xff, 0x66, /* 60% */
					                                      
	//Yellow		                                      
	0xff, 0x33, 0x00, 0x33, 0xff, 0x00, 0x33, 0x33, 0xcc, 0x33, 0xff, 0xcc, 0xff, 0x33, 0xcc, 0xff, 0xff, 0x00, 0xff, 0xff, 0xcc, /* 20% */
	0xff, 0x40, 0x00, 0x40, 0xff, 0x00, 0x40, 0x40, 0xbf, 0x40, 0xff, 0xbf, 0xff, 0x40, 0xbf, 0xff, 0xff, 0x00, 0xff, 0xff, 0xbf, /* 25% */
	0xff, 0x4d, 0x00, 0x4d, 0xff, 0x00, 0x4d, 0x4d, 0xb2, 0x4d, 0xff, 0xb2, 0xff, 0x4d, 0xb2, 0xff, 0xff, 0x00, 0xff, 0xff, 0xb2, /* 30% */
	0xff, 0x59, 0x00, 0x59, 0xff, 0x00, 0x59, 0x59, 0xa6, 0x59, 0xff, 0xa6, 0xff, 0x59, 0xa6, 0xff, 0xff, 0x00, 0xff, 0xff, 0xa6, /* 35% */
	0xff, 0x66, 0x00, 0x66, 0xff, 0x00, 0x66, 0x66, 0x99, 0x66, 0xff, 0x99, 0xff, 0x66, 0x99, 0xff, 0xff, 0x00, 0xff, 0xff, 0x99, /* 40% */
	0xff, 0x73, 0x00, 0x73, 0xff, 0x00, 0x73, 0x73, 0x8c, 0x73, 0xff, 0x8c, 0xff, 0x73, 0x8c, 0xff, 0xff, 0x00, 0xff, 0xff, 0x8c, /* 45% */
	0xff, 0x80, 0x00, 0x80, 0xff, 0x00, 0x80, 0x80, 0x7f, 0x80, 0xff, 0x7f, 0xff, 0x80, 0x7f, 0xff, 0xff, 0x00, 0xff, 0xff, 0x7f, /* 50% */
	0xff, 0x8c, 0x00, 0x8c, 0xff, 0x00, 0x8c, 0x8c, 0x73, 0x8c, 0xff, 0x73, 0xff, 0x8c, 0x73, 0xff, 0xff, 0x00, 0xff, 0xff, 0x73, /* 55% */
	0xff, 0x99, 0x00, 0x99, 0xff, 0x00, 0x99, 0x99, 0x66, 0x99, 0xff, 0x66, 0xff, 0x99, 0x66, 0xff, 0xff, 0x00, 0xff, 0xff, 0x66, /* 60% */
					                                      
	//Orange		                                      
	0xff, 0x19, 0x00, 0x33, 0xe5, 0x00, 0x33, 0x19, 0xcc, 0x33, 0xe5, 0xcc, 0xff, 0x19, 0xcc, 0xff, 0xe5, 0x00, 0xff, 0xe5, 0xcc, /* 20% */
	0xff, 0x20, 0x00, 0x40, 0xdf, 0x00, 0x40, 0x20, 0xbf, 0x40, 0xdf, 0xbf, 0xff, 0x20, 0xbf, 0xff, 0xdf, 0x00, 0xff, 0xdf, 0xbf, /* 25% */
	0xff, 0x26, 0x00, 0x4d, 0xd8, 0x00, 0x4d, 0x26, 0xb2, 0x4d, 0xd8, 0xb2, 0xff, 0x26, 0xb2, 0xff, 0xd8, 0x00, 0xff, 0xd8, 0xb2, /* 30% */
	0xff, 0x2c, 0x00, 0x59, 0xd2, 0x00, 0x59, 0x2c, 0xa6, 0x59, 0xd2, 0xa6, 0xff, 0x2c, 0xa6, 0xff, 0xd2, 0x00, 0xff, 0xd2, 0xa6, /* 35% */
	0xff, 0x33, 0x00, 0x66, 0xcc, 0x00, 0x66, 0x33, 0x99, 0x66, 0xcc, 0x99, 0xff, 0x33, 0x99, 0xff, 0xcc, 0x00, 0xff, 0xcc, 0x99, /* 40% */
	0xff, 0x39, 0x00, 0x73, 0xc5, 0x00, 0x73, 0x39, 0x8c, 0x73, 0xc5, 0x8c, 0xff, 0x39, 0x8c, 0xff, 0xc5, 0x00, 0xff, 0xc5, 0x8c, /* 45% */
	0xff, 0x40, 0x00, 0x80, 0xbf, 0x00, 0x80, 0x40, 0x7f, 0x80, 0xbf, 0x7f, 0xff, 0x40, 0x7f, 0xff, 0xbf, 0x00, 0xff, 0xbf, 0x7f, /* 50% */
	0xff, 0x46, 0x00, 0x8c, 0xb9, 0x00, 0x8c, 0x46, 0x73, 0x8c, 0xb9, 0x73, 0xff, 0x46, 0x73, 0xff, 0xb9, 0x00, 0xff, 0xb9, 0x73, /* 55% */
	0xff, 0x4c, 0x00, 0x99, 0xb2, 0x00, 0x99, 0x4c, 0x66, 0x99, 0xb2, 0x66, 0xff, 0x4c, 0x66, 0xff, 0xb2, 0x00, 0xff, 0xb2, 0x66, /* 60% */
					                                      
	//Red			                                      
	0xff, 0x00, 0x00, 0x33, 0xcc, 0x00, 0x33, 0x00, 0xcc, 0x33, 0xcc, 0xcc, 0xff, 0x00, 0xcc, 0xff, 0xcc, 0x00, 0xff, 0xcc, 0xcc, /* 20% */
	0xff, 0x00, 0x00, 0x40, 0xbf, 0x00, 0x40, 0x00, 0xbf, 0x40, 0xbf, 0xbf, 0xff, 0x00, 0xbf, 0xff, 0xbf, 0x00, 0xff, 0xbf, 0xbf, /* 25% */
	0xff, 0x00, 0x00, 0x4d, 0xb2, 0x00, 0x4d, 0x00, 0xb2, 0x4d, 0xb2, 0xb2, 0xff, 0x00, 0xb2, 0xff, 0xb2, 0x00, 0xff, 0xb2, 0xb2, /* 30% */
	0xff, 0x00, 0x00, 0x59, 0xa6, 0x00, 0x59, 0x00, 0xa6, 0x59, 0xa6, 0xa6, 0xff, 0x00, 0xa6, 0xff, 0xa6, 0x00, 0xff, 0xa6, 0xa6, /* 35% */
	0xff, 0x00, 0x00, 0x66, 0x99, 0x00, 0x66, 0x00, 0x99, 0x66, 0x99, 0x99, 0xff, 0x00, 0x99, 0xff, 0x99, 0x00, 0xff, 0x99, 0x99, /* 40% */
	0xff, 0x00, 0x00, 0x73, 0x8c, 0x00, 0x73, 0x00, 0x8c, 0x73, 0x8c, 0x8c, 0xff, 0x00, 0x8c, 0xff, 0x8c, 0x00, 0xff, 0x8c, 0x8c, /* 45% */
	0xff, 0x00, 0x00, 0x80, 0x7f, 0x00, 0x80, 0x00, 0x7f, 0x80, 0x7f, 0x7f, 0xff, 0x00, 0x7f, 0xff, 0x7f, 0x00, 0xff, 0x7f, 0x7f, /* 50% */
	0xff, 0x00, 0x00, 0x8c, 0x73, 0x00, 0x8c, 0x00, 0x73, 0x8c, 0x73, 0x73, 0xff, 0x00, 0x73, 0xff, 0x73, 0x00, 0xff, 0x73, 0x73, /* 55% */
	0xff, 0x00, 0x00, 0x99, 0x66, 0x00, 0x99, 0x00, 0x66, 0x99, 0x66, 0x66, 0xff, 0x00, 0x66, 0xff, 0x66, 0x00, 0xff, 0x66, 0x66, /* 60% */
					                                      
	//Rose			                                      
	0xff, 0x00, 0x19, 0x33, 0xcc, 0x19, 0x33, 0x00, 0xe5, 0x33, 0xcc, 0xe5, 0xff, 0x00, 0xe5, 0xff, 0xcc, 0x19, 0xff, 0xcc, 0xe5, /* 20% */
	0xff, 0x00, 0x20, 0x40, 0xbf, 0x20, 0x40, 0x00, 0xdf, 0x40, 0xbf, 0xdf, 0xff, 0x00, 0xdf, 0xff, 0xbf, 0x20, 0xff, 0xbf, 0xdf, /* 25% */
	0xff, 0x00, 0x26, 0x4d, 0xb2, 0x26, 0x4d, 0x00, 0xd8, 0x4d, 0xb2, 0xd8, 0xff, 0x00, 0xd8, 0xff, 0xb2, 0x26, 0xff, 0xb2, 0xd8, /* 30% */
	0xff, 0x00, 0x2c, 0x59, 0xa6, 0x2c, 0x59, 0x00, 0xd2, 0x59, 0xa6, 0xd2, 0xff, 0x00, 0xd2, 0xff, 0xa6, 0x2c, 0xff, 0xa6, 0xd2, /* 35% */
	0xff, 0x00, 0x33, 0x66, 0x99, 0x33, 0x66, 0x00, 0xcc, 0x66, 0x99, 0xcc, 0xff, 0x00, 0xcc, 0xff, 0x99, 0x33, 0xff, 0x99, 0xcc, /* 40% */
	0xff, 0x00, 0x39, 0x73, 0x8c, 0x39, 0x73, 0x00, 0xc5, 0x73, 0x8c, 0xc5, 0xff, 0x00, 0xc5, 0xff, 0x8c, 0x39, 0xff, 0x8c, 0xc5, /* 45% */
	0xff, 0x00, 0x40, 0x80, 0x7f, 0x40, 0x80, 0x00, 0xbf, 0x80, 0x7f, 0xbf, 0xff, 0x00, 0xbf, 0xff, 0x7f, 0x40, 0xff, 0x7f, 0xbf, /* 50% */
	0xff, 0x00, 0x46, 0x8c, 0x73, 0x46, 0x8c, 0x00, 0xb9, 0x8c, 0x73, 0xb9, 0xff, 0x00, 0xb9, 0xff, 0x73, 0x46, 0xff, 0x73, 0xb9, /* 55% */
	0xff, 0x00, 0x4c, 0x99, 0x66, 0x4c, 0x99, 0x00, 0xb2, 0x99, 0x66, 0xb2, 0xff, 0x00, 0xb2, 0xff, 0x66, 0x4c, 0xff, 0x66, 0xb2, /* 60% */
					                                      
	//Magenta		                                      
	0xff, 0x00, 0x33, 0x33, 0xcc, 0x33, 0x33, 0x00, 0xff, 0x33, 0xcc, 0xff, 0xff, 0x00, 0xff, 0xff, 0xcc, 0x33, 0xff, 0xcc, 0xff, /* 20% */
	0xff, 0x00, 0x40, 0x40, 0xbf, 0x40, 0x40, 0x00, 0xff, 0x40, 0xbf, 0xff, 0xff, 0x00, 0xff, 0xff, 0xbf, 0x40, 0xff, 0xbf, 0xff, /* 25% */
	0xff, 0x00, 0x4d, 0x4d, 0xb2, 0x4d, 0x4d, 0x00, 0xff, 0x4d, 0xb2, 0xff, 0xff, 0x00, 0xff, 0xff, 0xb2, 0x4d, 0xff, 0xb2, 0xff, /* 30% */
	0xff, 0x00, 0x59, 0x59, 0xa6, 0x59, 0x59, 0x00, 0xff, 0x59, 0xa6, 0xff, 0xff, 0x00, 0xff, 0xff, 0xa6, 0x59, 0xff, 0xa6, 0xff, /* 35% */
	0xff, 0x00, 0x66, 0x66, 0x99, 0x66, 0x66, 0x00, 0xff, 0x66, 0x99, 0xff, 0xff, 0x00, 0xff, 0xff, 0x99, 0x66, 0xff, 0x99, 0xff, /* 40% */
	0xff, 0x00, 0x73, 0x73, 0x8c, 0x73, 0x73, 0x00, 0xff, 0x73, 0x8c, 0xff, 0xff, 0x00, 0xff, 0xff, 0x8c, 0x73, 0xff, 0x8c, 0xff, /* 45% */
	0xff, 0x00, 0x80, 0x80, 0x7f, 0x80, 0x80, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0x00, 0xff, 0xff, 0x7f, 0x80, 0xff, 0x7f, 0xff, /* 50% */
	0xff, 0x00, 0x8c, 0x8c, 0x73, 0x8c, 0x8c, 0x00, 0xff, 0x8c, 0x73, 0xff, 0xff, 0x00, 0xff, 0xff, 0x73, 0x8c, 0xff, 0x73, 0xff, /* 55% */
	0xff, 0x00, 0x99, 0x99, 0x66, 0x99, 0x99, 0x00, 0xff, 0x99, 0x66, 0xff, 0xff, 0x00, 0xff, 0xff, 0x66, 0x99, 0xff, 0x66, 0xff, /* 60% */
					                                      
	//Violet		                                      
	0xe5, 0x00, 0x33, 0x19, 0xcc, 0x33, 0x19, 0x00, 0xff, 0x19, 0xcc, 0xff, 0xe5, 0x00, 0xff, 0xe5, 0xcc, 0x33, 0xe5, 0xcc, 0xff, /* 20% */
	0xdf, 0x00, 0x40, 0x20, 0xbf, 0x40, 0x20, 0x00, 0xff, 0x20, 0xbf, 0xff, 0xdf, 0x00, 0xff, 0xdf, 0xbf, 0x40, 0xdf, 0xbf, 0xff, /* 25% */
	0xd8, 0x00, 0x4d, 0x26, 0xb2, 0x4d, 0x26, 0x00, 0xff, 0x26, 0xb2, 0xff, 0xd8, 0x00, 0xff, 0xd8, 0xb2, 0x4d, 0xd8, 0xb2, 0xff, /* 30% */
	0xd2, 0x00, 0x59, 0x2c, 0xa6, 0x59, 0x2c, 0x00, 0xff, 0x2c, 0xa6, 0xff, 0xd2, 0x00, 0xff, 0xd2, 0xa6, 0x59, 0xd2, 0xa6, 0xff, /* 35% */
	0xcc, 0x00, 0x66, 0x33, 0x99, 0x66, 0x33, 0x00, 0xff, 0x33, 0x99, 0xff, 0xcc, 0x00, 0xff, 0xcc, 0x99, 0x66, 0xcc, 0x99, 0xff, /* 40% */
	0xc5, 0x00, 0x73, 0x39, 0x8c, 0x73, 0x39, 0x00, 0xff, 0x39, 0x8c, 0xff, 0xc5, 0x00, 0xff, 0xc5, 0x8c, 0x73, 0xc5, 0x8c, 0xff, /* 45% */
	0xbf, 0x00, 0x80, 0x40, 0x7f, 0x80, 0x40, 0x00, 0xff, 0x40, 0x7f, 0xff, 0xbf, 0x00, 0xff, 0xbf, 0x7f, 0x80, 0xbf, 0x7f, 0xff, /* 50% */
	0xb9, 0x00, 0x8c, 0x46, 0x73, 0x8c, 0x46, 0x00, 0xff, 0x46, 0x73, 0xff, 0xb9, 0x00, 0xff, 0xb9, 0x73, 0x8c, 0xb9, 0x73, 0xff, /* 55% */
	0xb2, 0x00, 0x99, 0x4c, 0x66, 0x99, 0x4c, 0x00, 0xff, 0x4c, 0x66, 0xff, 0xb2, 0x00, 0xff, 0xb2, 0x66, 0x99, 0xb2, 0x66, 0xff, /* 60% */
};

static unsigned char night_mode_data[] = {
	0xff, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xfd, 0xf8, 0xff, 0x00, 0xf8, 0xff, 0xfd, 0x00, 0xff, 0xfd, 0xf8, /* 6750K */
	0xff, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x00, 0x00, 0xf0, 0x00, 0xfa, 0xf0, 0xff, 0x00, 0xf0, 0xff, 0xfa, 0x00, 0xff, 0xfa, 0xf0, /* 6500K */
	0xff, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x00, 0x00, 0xe6, 0x00, 0xf7, 0xe6, 0xff, 0x00, 0xe6, 0xff, 0xf7, 0x00, 0xff, 0xf7, 0xe6, /* 6250K */
	0xff, 0x00, 0x00, 0x00, 0xf3, 0x00, 0x00, 0x00, 0xde, 0x00, 0xf3, 0xde, 0xff, 0x00, 0xde, 0xff, 0xf3, 0x00, 0xff, 0xf3, 0xde, /* 6000K */
	0xff, 0x00, 0x00, 0x00, 0xef, 0x00, 0x00, 0x00, 0xd4, 0x00, 0xef, 0xd4, 0xff, 0x00, 0xd4, 0xff, 0xef, 0x00, 0xff, 0xef, 0xd4, /* 5750K */
	0xff, 0x00, 0x00, 0x00, 0xeb, 0x00, 0x00, 0x00, 0xca, 0x00, 0xeb, 0xca, 0xff, 0x00, 0xca, 0xff, 0xeb, 0x00, 0xff, 0xeb, 0xca, /* 5500K */
	0xff, 0x00, 0x00, 0x00, 0xe1, 0x00, 0x00, 0x00, 0xb1, 0x00, 0xe1, 0xb1, 0xff, 0x00, 0xb1, 0xff, 0xe1, 0x00, 0xff, 0xe1, 0xb1, /* 4900K */
	0xff, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x92, 0x00, 0xd4, 0x92, 0xff, 0x00, 0x92, 0xff, 0xd4, 0x00, 0xff, 0xd4, 0x92, /* 4300K */
	0xff, 0x00, 0x00, 0x00, 0xc2, 0x00, 0x00, 0x00, 0x6e, 0x00, 0xc2, 0x6e, 0xff, 0x00, 0x6e, 0xff, 0xc2, 0x00, 0xff, 0xc2, 0x6e, /* 3700K */
	0xff, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x4b, 0x00, 0xae, 0x4b, 0xff, 0x00, 0x4b, 0xff, 0xae, 0x00, 0xff, 0xae, 0x4b, /* 3100K */
	0xff, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x21, 0x00, 0x85, 0x21, 0xff, 0x00, 0x21, 0xff, 0x85, 0x00, 0xff, 0x85, 0x21, /* 2500K */
};

static inline int get_hbm_index(int idx)
{
	int i = 0;
	int idx_list[] = {
		40000	/* idx < 40000: HBM_OFF */
				/* idx >= 40000: HBM_ON */
	};

	while (i < ARRAY_SIZE(idx_list)) {
		if (idx < idx_list[i])
			break;
		i++;
	}

	return i;
}

static unsigned char BYPASS_1[] = {
	0x81, // CRC, BLF
	0x00, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char BYPASS_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char BYPASS_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char BYPASS_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char BYPASS_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xa2, // crc_lut_mode1_rr
	0x0b, // crc_lut_mode1_rg
	0x04, // crc_lut_mode1_rb
	0x38, // crc_lut_mode1_gr
	0xbf, // crc_lut_mode1_gg
	0x13, // crc_lut_mode1_gb
	0x05, // crc_lut_mode1_br
	0x06, // crc_lut_mode1_bg
	0xaf, // crc_lut_mode1_bb
	0x45, // crc_lut_mode1_cr
	0xe0, // crc_lut_mode1_cg
	0xd2, // crc_lut_mode1_cb
	0xc2, // crc_lut_mode1_mr
	0x12, // crc_lut_mode1_mg
	0xc3, // crc_lut_mode1_mb
	0xe3, // crc_lut_mode1_yr
	0xd9, // crc_lut_mode1_yg
	0x19, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xfc, // crc_lut_mode1_wg
	0xf6, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char BYPASS_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

static unsigned char GRAYSCALE_1[] = {
	0x81, // CRC, BLF
	0x00, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char GRAYSCALE_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char GRAYSCALE_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char GRAYSCALE_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char GRAYSCALE_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xa2, // crc_lut_mode1_rr
	0x0b, // crc_lut_mode1_rg
	0x04, // crc_lut_mode1_rb
	0x38, // crc_lut_mode1_gr
	0xbf, // crc_lut_mode1_gg
	0x13, // crc_lut_mode1_gb
	0x05, // crc_lut_mode1_br
	0x06, // crc_lut_mode1_bg
	0xaf, // crc_lut_mode1_bb
	0x45, // crc_lut_mode1_cr
	0xe0, // crc_lut_mode1_cg
	0xd2, // crc_lut_mode1_cb
	0xc2, // crc_lut_mode1_mr
	0x12, // crc_lut_mode1_mg
	0xc3, // crc_lut_mode1_mb
	0xe3, // crc_lut_mode1_yr
	0xd9, // crc_lut_mode1_yg
	0x19, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xfc, // crc_lut_mode1_wg
	0xf6, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char GRAYSCALE_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

static unsigned char GRAYSCALE_NEGATIVE_1[] = {
	0x81, // CRC, BLF
	0x00, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char GRAYSCALE_NEGATIVE_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char GRAYSCALE_NEGATIVE_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char GRAYSCALE_NEGATIVE_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char GRAYSCALE_NEGATIVE_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xa2, // crc_lut_mode1_rr
	0x0b, // crc_lut_mode1_rg
	0x04, // crc_lut_mode1_rb
	0x38, // crc_lut_mode1_gr
	0xbf, // crc_lut_mode1_gg
	0x13, // crc_lut_mode1_gb
	0x05, // crc_lut_mode1_br
	0x06, // crc_lut_mode1_bg
	0xaf, // crc_lut_mode1_bb
	0x45, // crc_lut_mode1_cr
	0xe0, // crc_lut_mode1_cg
	0xd2, // crc_lut_mode1_cb
	0xc2, // crc_lut_mode1_mr
	0x12, // crc_lut_mode1_mg
	0xc3, // crc_lut_mode1_mb
	0xe3, // crc_lut_mode1_yr
	0xd9, // crc_lut_mode1_yg
	0x19, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xfc, // crc_lut_mode1_wg
	0xf6, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char GRAYSCALE_NEGATIVE_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

static unsigned char NEGATIVE_1[] = {
	0x81, // CRC, BLF
	0x00, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char NEGATIVE_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char NEGATIVE_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char NEGATIVE_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char NEGATIVE_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xa2, // crc_lut_mode1_rr
	0x0b, // crc_lut_mode1_rg
	0x04, // crc_lut_mode1_rb
	0x38, // crc_lut_mode1_gr
	0xbf, // crc_lut_mode1_gg
	0x13, // crc_lut_mode1_gb
	0x05, // crc_lut_mode1_br
	0x06, // crc_lut_mode1_bg
	0xaf, // crc_lut_mode1_bb
	0x45, // crc_lut_mode1_cr
	0xe0, // crc_lut_mode1_cg
	0xd2, // crc_lut_mode1_cb
	0xc2, // crc_lut_mode1_mr
	0x12, // crc_lut_mode1_mg
	0xc3, // crc_lut_mode1_mb
	0xe3, // crc_lut_mode1_yr
	0xd9, // crc_lut_mode1_yg
	0x19, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xfc, // crc_lut_mode1_wg
	0xf6, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char NEGATIVE_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

static unsigned char COLOR_BLIND_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char COLOR_BLIND_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char COLOR_BLIND_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char COLOR_BLIND_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char COLOR_BLIND_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xa2, // crc_lut_mode1_rr
	0x0b, // crc_lut_mode1_rg
	0x04, // crc_lut_mode1_rb
	0x38, // crc_lut_mode1_gr
	0xbf, // crc_lut_mode1_gg
	0x13, // crc_lut_mode1_gb
	0x05, // crc_lut_mode1_br
	0x06, // crc_lut_mode1_bg
	0xaf, // crc_lut_mode1_bb
	0x45, // crc_lut_mode1_cr
	0xe0, // crc_lut_mode1_cg
	0xd2, // crc_lut_mode1_cb
	0xc2, // crc_lut_mode1_mr
	0x12, // crc_lut_mode1_mg
	0xc3, // crc_lut_mode1_mb
	0xe3, // crc_lut_mode1_yr
	0xd9, // crc_lut_mode1_yg
	0x19, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xfc, // crc_lut_mode1_wg
	0xf6, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char COLOR_BLIND_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

static unsigned char COLOR_LENS_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char COLOR_LENS_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char COLOR_LENS_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char COLOR_LENS_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char COLOR_LENS_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xa2, // crc_lut_mode1_rr
	0x0b, // crc_lut_mode1_rg
	0x04, // crc_lut_mode1_rb
	0x38, // crc_lut_mode1_gr
	0xbf, // crc_lut_mode1_gg
	0x13, // crc_lut_mode1_gb
	0x05, // crc_lut_mode1_br
	0x06, // crc_lut_mode1_bg
	0xaf, // crc_lut_mode1_bb
	0x45, // crc_lut_mode1_cr
	0xe0, // crc_lut_mode1_cg
	0xd2, // crc_lut_mode1_cb
	0xc2, // crc_lut_mode1_mr
	0x12, // crc_lut_mode1_mg
	0xc3, // crc_lut_mode1_mb
	0xe3, // crc_lut_mode1_yr
	0xd9, // crc_lut_mode1_yg
	0x19, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xfc, // crc_lut_mode1_wg
	0xf6, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char COLOR_LENS_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

static unsigned char NIGHT_MODE_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char NIGHT_MODE_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char NIGHT_MODE_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char NIGHT_MODE_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char NIGHT_MODE_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xff, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xff, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xff, // crc_lut_mode1_wg
	0xff, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char NIGHT_MODE_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

static unsigned char LIGHT_NOTIFICATION_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char LIGHT_NOTIFICATION_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char LIGHT_NOTIFICATION_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char LIGHT_NOTIFICATION_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char LIGHT_NOTIFICATION_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x60, // crc_lut_mode1_rg
	0x13, // crc_lut_mode1_rb
	0x66, // crc_lut_mode1_gr
	0xf9, // crc_lut_mode1_gg
	0x13, // crc_lut_mode1_gb
	0x66, // crc_lut_mode1_br
	0x60, // crc_lut_mode1_bg
	0xac, // crc_lut_mode1_bb
	0x66, // crc_lut_mode1_cr
	0xf9, // crc_lut_mode1_cg
	0xac, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x60, // crc_lut_mode1_mg
	0xac, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xf9, // crc_lut_mode1_yg
	0x13, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xf9, // crc_lut_mode1_wg
	0xac, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char LIGHT_NOTIFICATION_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

static unsigned char SCREEN_CURTAIN_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char SCREEN_CURTAIN_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char SCREEN_CURTAIN_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char SCREEN_CURTAIN_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char SCREEN_CURTAIN_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0x00, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0x00, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0x00, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0x00, // crc_lut_mode1_cg
	0x00, // crc_lut_mode1_cb
	0x00, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0x00, // crc_lut_mode1_mb
	0x00, // crc_lut_mode1_yr
	0x00, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0x00, // crc_lut_mode1_wr
	0x00, // crc_lut_mode1_wg
	0x00, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char SCREEN_CURTAIN_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

/******************** UI ********************/

static unsigned char DYNAMIC_UI_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char DYNAMIC_UI_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char DYNAMIC_UI_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char DYNAMIC_UI_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char DYNAMIC_UI_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xb6, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x1e, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x06, // crc_lut_mode1_br
	0x05, // crc_lut_mode1_bg
	0xca, // crc_lut_mode1_bb
	0x20, // crc_lut_mode1_cr
	0xf0, // crc_lut_mode1_cg
	0xe0, // crc_lut_mode1_cb
	0xda, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xd6, // crc_lut_mode1_mb
	0xda, // crc_lut_mode1_yr
	0xd6, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xfa, // crc_lut_mode1_wg
	0xf0, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char DYNAMIC_UI_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

static unsigned char STANDARD_UI_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char STANDARD_UI_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char STANDARD_UI_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char STANDARD_UI_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char STANDARD_UI_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xe4, // crc_lut_mode1_rr
	0x01, // crc_lut_mode1_rg
	0x06, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x05, // crc_lut_mode1_br
	0x05, // crc_lut_mode1_bg
	0xc8, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xe3, // crc_lut_mode1_cg
	0xda, // crc_lut_mode1_cb
	0xfa, // crc_lut_mode1_mr
	0x09, // crc_lut_mode1_mg
	0xde, // crc_lut_mode1_mb
	0xe6, // crc_lut_mode1_yr
	0xdc, // crc_lut_mode1_yg
	0x0c, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xfa, // crc_lut_mode1_wg
	0xf0, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char STANDARD_UI_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

static unsigned char NATURAL_UI_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char NATURAL_UI_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char NATURAL_UI_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char NATURAL_UI_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char NATURAL_UI_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xac, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x04, // crc_lut_mode1_rb
	0x43, // crc_lut_mode1_gr
	0xee, // crc_lut_mode1_gg
	0x11, // crc_lut_mode1_gb
	0x05, // crc_lut_mode1_br
	0x06, // crc_lut_mode1_bg
	0xc0, // crc_lut_mode1_bb
	0x4c, // crc_lut_mode1_cr
	0xeb, // crc_lut_mode1_cg
	0xe0, // crc_lut_mode1_cb
	0xc2, // crc_lut_mode1_mr
	0x05, // crc_lut_mode1_mg
	0xd0, // crc_lut_mode1_mb
	0xe6, // crc_lut_mode1_yr
	0xdc, // crc_lut_mode1_yg
	0x17, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xfa, // crc_lut_mode1_wg
	0xf0, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char NATURAL_UI_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

static unsigned char AUTO_UI_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char AUTO_UI_2[] = {
	0x83, // TCS
	0x80, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char AUTO_UI_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char AUTO_UI_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char AUTO_UI_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xff, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xff, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xff, // crc_lut_mode1_wg
	0xff, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char AUTO_UI_6[] = {
	0xB3, // ACE , TCS, ORE
	0xc4, // skin_boundary_parameter
	0x0f,
	0x35,
	0x00,
	0x00,
	0x04,
	0x35,
	0x00,
	0x00,
	0x04,
	0x0d,
	0xf5,
	0x00,
	0x81,
	0x1a,
	0x60,
	0x00,
	0xb6,
	0x00,
	0x15,
	0x1c,
	0x3c,
	0x05,
	0xd1,
	0x05,
	0xd4,
	0x64,
	0x10, // Skin Color Gain (0x00 ~ 0xFF)
	0x7c, // Target Skin Color (Cb)
	0x88, // Target Skin Color (Cr)
	0x00, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x8a, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0x24,
	0x8a,
	0x01,
	0x86,
	0x82,
	0xfa,
	0x7c,
	0xf4,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

/******************** GALLERY ********************/

static unsigned char AUTO_GALLERY_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char AUTO_GALLERY_2[] = {
	0x83, // TCS
	0x80, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char AUTO_GALLERY_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char AUTO_GALLERY_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char AUTO_GALLERY_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xff, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xf0, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xff, // crc_lut_mode1_wg
	0xff, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char AUTO_GALLERY_6[] = {
	0xB3, // ACE , TCS, ORE
	0xc4, // skin_boundary_parameter
	0x0f,
	0x7f,
	0x00,
	0x00,
	0x03,
	0x40,
	0x00,
	0x00,
	0x02,
	0x00,
	0xff,
	0x00,
	0x80,
	0x28,
	0x7e,
	0x00,
	0xff,
	0x00,
	0x04,
	0x93,
	0x7a,
	0x00,
	0x2f,
	0x02,
	0x08,
	0x64,
	0x20, // Skin Color Gain (0x00 ~ 0xFF)
	0x8a, // Target Skin Color (Cb)
	0x80, // Target Skin Color (Cr)
	0x00, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x8a, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0x24,
	0x8a,
	0x01,
	0x86,
	0x82,
	0xfa,
	0x7c,
	0xf4,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

/******************** VIDEO ********************/

/******************** VT ********************/

/******************** CAMERA ********************/

static unsigned char AUTO_CAMERA_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char AUTO_CAMERA_2[] = {
	0x83, // TCS
	0x80, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char AUTO_CAMERA_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char AUTO_CAMERA_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char AUTO_CAMERA_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xff, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xf0, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xff, // crc_lut_mode1_wg
	0xff, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char AUTO_CAMERA_6[] = {
	0xB3, // ACE , TCS, ORE
	0xc4, // skin_boundary_parameter
	0x0f,
	0x7f,
	0x00,
	0x00,
	0x03,
	0x40,
	0x00,
	0x00,
	0x02,
	0x00,
	0xff,
	0x00,
	0x80,
	0x28,
	0x7e,
	0x00,
	0xff,
	0x00,
	0x04,
	0x93,
	0x7a,
	0x00,
	0x2f,
	0x02,
	0x08,
	0x64,
	0x20, // Skin Color Gain (0x00 ~ 0xFF)
	0x8a, // Target Skin Color (Cb)
	0x80, // Target Skin Color (Cr)
	0x00, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x8a, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0x24,
	0x8a,
	0x01,
	0x86,
	0x82,
	0xfa,
	0x7c,
	0xf4,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

/******************** BROWSER ********************/

/******************** eBOOK ********************/

static unsigned char AUTO_EBOOK_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char AUTO_EBOOK_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char AUTO_EBOOK_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char AUTO_EBOOK_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char AUTO_EBOOK_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xff, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xff, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xf3, // crc_lut_mode1_wg
	0xde, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char AUTO_EBOOK_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

static unsigned char AUTO_EMAIL_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char AUTO_EMAIL_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char AUTO_EMAIL_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char AUTO_EMAIL_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char AUTO_EMAIL_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xff, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xff, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xf4, // crc_lut_mode1_wg
	0xea, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char AUTO_EMAIL_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

/******************** DMB ********************/

#ifdef CONFIG_LCD_HMT

static unsigned char HMT_3000K_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char HMT_3000K_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char HMT_3000K_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char HMT_3000K_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char HMT_3000K_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xf5, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xff, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xb3, // crc_lut_mode1_wg
	0x56, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char HMT_3000K_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

static unsigned char HMT_4000K_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char HMT_4000K_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char HMT_4000K_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char HMT_4000K_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char HMT_4000K_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xf5, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xff, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xcf, // crc_lut_mode1_wg
	0x88, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char HMT_4000K_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

static unsigned char HMT_5000K_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char HMT_5000K_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char HMT_5000K_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char HMT_5000K_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char HMT_5000K_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xf5, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xff, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xe3, // crc_lut_mode1_wg
	0xb4, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xee, // crc_lut_mode2_cg
	0xd6, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char HMT_5000K_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

static unsigned char HMT_6500K_1[] = {
	0x81, // CRC, BLF
	0x90, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char HMT_6500K_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char HMT_6500K_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char HMT_6500K_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x00, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char HMT_6500K_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xf5, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xff, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xfa, // crc_lut_mode1_wg
	0xf0, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char HMT_6500K_6[] = {
	0xB3, // ACE , TCS, ORE
	0x80, // skin_boundary_parameter
	0x41,
	0x36,
	0x00,
	0x00,
	0x04,
	0x36,
	0x00,
	0x00,
	0x04,
	0x0e,
	0x35,
	0x00,
	0x7e,
	0x1a,
	0x80,
	0x00,
	0xb4,
	0x00,
	0x1d,
	0x09,
	0xba,
	0x00,
	0x36,
	0x09,
	0x44,
	0x64,
	0xa0, // Skin Color Gain (0x00 ~ 0xFF)
	0x6a, // Target Skin Color (Cb)
	0x9a, // Target Skin Color (Cr)
	0x01, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

#endif

static unsigned char LOCAL_CE_1[] = {
	0x81, // CRC, BLF
	0x00, // CRC on/off, BLF on/off, CRC on/off 0 0 00 00 00 
};

static unsigned char LOCAL_CE_2[] = {
	0x83, // TCS
	0x00, // 0x80 : TCS_enable, 0x00 : TCS_disable
};

static unsigned char LOCAL_CE_3[] = {
	0x85, // ACE
	0x00, // 0x00 : ACE_Disable, 0x9F : ACE_Enable, Default Gain
};

static unsigned char LOCAL_CE_4[] = {
	0x87, // ORE
	0x00, // 0x00 : ORE_Disable, 0x80 : ORE_Enable
	0x80, // ORE_level, ex) 0xff : ORE_255_Step(max), 0x00 : ORE_0_step (min)
};

static unsigned char LOCAL_CE_5[] = {
	0xB1, // CRC, BLF
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xf5, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xff, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xff, // crc_lut_mode1_wg
	0xff, // crc_lut_mode1_wb
	0xf1, // crc_lut_mode2_rr
	0x14, // crc_lut_mode2_rg
	0x07, // crc_lut_mode2_rb
	0x00, // crc_lut_mode2_gr
	0xb4, // crc_lut_mode2_gg
	0x07, // crc_lut_mode2_gb
	0x07, // crc_lut_mode2_br
	0x06, // crc_lut_mode2_bg
	0xc1, // crc_lut_mode2_bb
	0x00, // crc_lut_mode2_cr
	0xd0, // crc_lut_mode2_cg
	0xc9, // crc_lut_mode2_cb
	0xff, // crc_lut_mode2_mr
	0x1b, // crc_lut_mode2_mg
	0xd2, // crc_lut_mode2_mb
	0xe4, // crc_lut_mode2_yr
	0xde, // crc_lut_mode2_yg
	0x0f, // crc_lut_mode2_yb
	0xff, // crc_lut_mode2_wr
	0xff, // crc_lut_mode2_wg
	0xff, // crc_lut_mode2_wb
	0xff, // crc_lut_mode3_rr
	0x00, // crc_lut_mode3_rg
	0x00, // crc_lut_mode3_rb
	0x00, // crc_lut_mode3_gr
	0xff, // crc_lut_mode3_gg
	0x00, // crc_lut_mode3_gb
	0x00, // crc_lut_mode3_br
	0x00, // crc_lut_mode3_bg
	0xff, // crc_lut_mode3_bb
	0x00, // crc_lut_mode3_cr
	0xff, // crc_lut_mode3_cg
	0xff, // crc_lut_mode3_cb
	0xff, // crc_lut_mode3_mr
	0x00, // crc_lut_mode3_mg
	0xff, // crc_lut_mode3_mb
	0xff, // crc_lut_mode3_yr
	0xff, // crc_lut_mode3_yg
	0x00, // crc_lut_mode3_yb
	0xff, // crc_lut_mode3_wr
	0xff, // crc_lut_mode3_wg
	0xff, // crc_lut_mode3_wb
	0x30, // blf_fixed_parameter
	0x00, // blue_light_reduction_level 0 - ff
	0x66,
	0xb2,
	0xff,
	0x14, // Diff LUT #0, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x11, // Diff LUT #0, Green, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x04, // Diff LUT #0, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x14, // Diff LUT #0, Cyan, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x11, // Diff LUT #0, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x41,
	0x04, // Diff LUT #0, Yellow, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x00,
	0x00, // Diff LUT #0, White, [r:8bit, g:8bit, b:8bit]
	0x24,
	0x41,
	0x1f, // Diff LUT #1, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x19, // Diff LUT #1, Green, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x04, // Diff LUT #1, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x1e, // Diff LUT #1, Cyan, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x19, // Diff LUT #1, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x66,
	0x04, // Diff LUT #1, Yellow, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x00,
	0x00, // Diff LUT #1, White, [r:8bit, g:8bit, b:8bit]
	0x35,
	0x66,
	0x1d, // Diff LUT #2, Red, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x00,
	0x1d, // Diff LUT #2, Green, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x01, // Diff LUT #2, Blue, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x1e, // Diff LUT #2, Cyan, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
	0x1d, // Diff LUT #2, Magenta, [r:8bit, g:8bit, b:8bit]
	0x00,
	0x3c,
	0x01, // Diff LUT #2, Yellow, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x00,
	0x00, // Diff LUT #2, White, [r:8bit, g:8bit, b:8bit]
	0x38,
	0x3c,
};

static unsigned char LOCAL_CE_6[] = {
	0xB3, // ACE , TCS, ORE
	0xc0, // skin_boundary_parameter
	0x05,
	0x02,
	0x49,
	0x00,
	0xb0,
	0x02,
	0x80,
	0x00,
	0x4c,
	0x01,
	0x67,
	0x00,
	0x11,
	0x02,
	0x0f,
	0x00,
	0x98,
	0x03,
	0xd0,
	0x0b,
	0x68,
	0x03,
	0x82,
	0x04,
	0x29,
	0x64,
	0x10, // Skin Color Gain (0x00 ~ 0xFF)
	0x82, // Target Skin Color (Cb)
	0x81, // Target Skin Color (Cr)
	0x00, // Threshold Value of Skin Color Detection
	0x32, // Minumum Y of Skin Brightness Control
	0xdc, // Maximum Y of Skin Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x91, // Target Y of Skin Brihgtness Contol
	0x00, // Skin Brightness Parameter
	0xa3,
	0xab,
	0x06,
	0xda,
	0x8d,
	0x65,
	0x72,
	0x49,
	0x00, // ace_bypass
	0xf0,
	0x00,
	0xcf,
	0xff,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x30,
	0x10,
	0x64,
	0x02,
	0x10,
	0x08,
	0x10,
	0x00,
	0x20,
	0x10,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00, // ore_bypass
};

static unsigned char LEVEL_UNLOCK[] = {
	0xF0,
	0x5A, 0x5A
};

static unsigned char LEVEL_LOCK[] = {
	0xF0,
	0xA5, 0xA5
};

#define MDNIE_SET(id)	\
{							\
	.name		= #id,				\
	.update_flag	= {0, 1, 2, 3, 4, 5, 6, 0},			\
	.seq		= {				\
		{	.cmd = LEVEL_UNLOCK,	.len = ARRAY_SIZE(LEVEL_UNLOCK),	.sleep = 0,},	\
		{	.cmd = id##_1,		.len = ARRAY_SIZE(id##_1),		.sleep = 0,},	\
		{	.cmd = id##_2,		.len = ARRAY_SIZE(id##_2),		.sleep = 0,},	\
		{	.cmd = id##_3,		.len = ARRAY_SIZE(id##_3),		.sleep = 0,},	\
		{	.cmd = id##_4,		.len = ARRAY_SIZE(id##_4),		.sleep = 0,},	\
		{	.cmd = id##_5,		.len = ARRAY_SIZE(id##_5),		.sleep = 0,},	\
		{	.cmd = id##_6,		.len = ARRAY_SIZE(id##_6),		.sleep = 0,},	\
		{	.cmd = LEVEL_LOCK,	.len = ARRAY_SIZE(LEVEL_LOCK),		.sleep = 0,},	\
	}	\
}

static struct mdnie_table bypass_table[BYPASS_MAX] = {
	[BYPASS_ON] = MDNIE_SET(BYPASS)
};

static struct mdnie_table accessibility_table[ACCESSIBILITY_MAX] = {
	[NEGATIVE] = MDNIE_SET(NEGATIVE),
	MDNIE_SET(COLOR_BLIND),
	MDNIE_SET(SCREEN_CURTAIN),
	MDNIE_SET(GRAYSCALE),
	MDNIE_SET(GRAYSCALE_NEGATIVE)
};

static struct mdnie_table hbm_table[HBM_MAX] = {
	[HBM_ON] = MDNIE_SET(LOCAL_CE)
};

#ifdef CONFIG_LCD_HMT
static struct mdnie_table hmt_table[HMT_MDNIE_MAX] = {
	[HMT_MDNIE_ON] = MDNIE_SET(HMT_3000K),
	MDNIE_SET(HMT_4000K),
	MDNIE_SET(HMT_5000K),
	MDNIE_SET(HMT_6500K)
};
#endif

static struct mdnie_table dmb_table[MODE_MAX] = {
	MDNIE_SET(DYNAMIC_UI),
	MDNIE_SET(STANDARD_UI),
	MDNIE_SET(NATURAL_UI),
	MDNIE_SET(AUTO_GALLERY),
	MDNIE_SET(AUTO_GALLERY),
	MDNIE_SET(AUTO_EBOOK)
};

static struct mdnie_table night_table[NIGHT_MODE_MAX] = {
	[NIGHT_MODE_ON] = MDNIE_SET(NIGHT_MODE)
};

static struct mdnie_table lens_table[COLOR_LENS_MAX] = {
	[COLOR_LENS_ON] = MDNIE_SET(COLOR_LENS)
};

static struct mdnie_table light_notification_table[LIGHT_NOTIFICATION_MAX] = {
	[LIGHT_NOTIFICATION_ON] = MDNIE_SET(LIGHT_NOTIFICATION)
};

static struct mdnie_table main_table[SCENARIO_MAX][MODE_MAX] = {
	{
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(STANDARD_UI),
		MDNIE_SET(NATURAL_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_EBOOK)
	}, {
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(STANDARD_UI),
		MDNIE_SET(NATURAL_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_EBOOK)
	},
	[CAMERA_MODE] = {
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(STANDARD_UI),
		MDNIE_SET(NATURAL_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_CAMERA),
		MDNIE_SET(AUTO_EBOOK)
	},
	[GALLERY_MODE] = {
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(STANDARD_UI),
		MDNIE_SET(NATURAL_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_GALLERY),
		MDNIE_SET(AUTO_EBOOK)
	}, {
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(STANDARD_UI),
		MDNIE_SET(NATURAL_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_EBOOK)
	}, {
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(STANDARD_UI),
		MDNIE_SET(NATURAL_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_GALLERY),
		MDNIE_SET(AUTO_EBOOK)
	}, {
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(STANDARD_UI),
		MDNIE_SET(NATURAL_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_EBOOK),
		MDNIE_SET(AUTO_EBOOK)
	}, {
		MDNIE_SET(AUTO_EMAIL),
		MDNIE_SET(AUTO_EMAIL),
		MDNIE_SET(AUTO_EMAIL),
		MDNIE_SET(AUTO_EMAIL),
		MDNIE_SET(AUTO_EMAIL),
		MDNIE_SET(AUTO_EBOOK)
	}
};

#undef MDNIE_SET

static struct mdnie_tune tune_info = {
	.bypass_table = bypass_table,
	.accessibility_table = accessibility_table,
	.hbm_table = hbm_table,
	.night_table = night_table,
	.lens_table = lens_table,
	.light_notification_table = light_notification_table,

#ifdef CONFIG_LCD_HMT
	.hmt_table = hmt_table,
#endif
	.dmb_table = dmb_table,
	.main_table = main_table,

	.coordinate_table = coordinate_data,
	.adjust_ldu_table = adjust_ldu_data,
	.night_mode_table = night_mode_data,
	.color_lens_table = color_lens_data,
	.scr_info = &scr_info,
	.get_hbm_index = get_hbm_index,
	.night_info = &night_info,
	.color_lens_info = &color_lens_info,
	.color_offset = {NULL, color_offset_f1, color_offset_f2, color_offset_f3, color_offset_f4}
};
#endif
